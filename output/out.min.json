{
  "slots": {
    "0": {
      "name": "slot1",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "1": {
      "name": "slot2",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "2": {
      "name": "slot3",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "3": {
      "name": "slot4",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "4": {
      "name": "slot5",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "5": {
      "name": "slot6",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "6": {
      "name": "slot7",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "7": {
      "name": "slot8",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "8": {
      "name": "slot9",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "9": {
      "name": "slot10",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "10": {
      "name": "slot11",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "11": {
      "name": "slot12",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "12": {
      "name": "slot13",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "13": {
      "name": "slot14",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "14": {
      "name": "slot15",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "15": {
      "name": "slot16",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "16": {
      "name": "slot17",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "17": {
      "name": "slot18",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "18": {
      "name": "slot19",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "19": {
      "name": "slot20",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "20": {
      "name": "slot21",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-3": {
      "name": "library",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-2": {
      "name": "system",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-1": {
      "name": "unit",
      "type": {
        "events": [],
        "methods": []
      }
    }
  },
  "handlers": [
    {
      "code": "updateSettings=false;altHoldPreset1=132000;altHoldPreset2=1000;altHoldPreset3=50;altHoldPreset4=2;deviationThreshold=0.5;inertialDampening=true;followGravity=true;minRotationSpeed=0.01;maxRotationSpeed=5;rotationStep=0.03;verticalSpeedLimitAtmo=1100;verticalSpeedLimitSpace=4000;approachSpeed=100;autoShutdown=true;breadCrumbDist=1000;ContainerOptimization=0;FuelTankOptimization=0;fuelTankHandlingAtmo=0;fuelTankHandlingSpace=0;primaryColor=\"b80000\"secondaryColor=\"e30000\"textShadow=\"e81313\"ARCrosshair=\"ebbb0c\"fuelFontSize=1.8;showDockingWidget=true;dockingMode=1;setBaseOnStart=false;useGEAS=false;GEAS_Alt=10;activateFFonStart=false;pocket=false;mouseSensitivity=1;enableARReticle=true;function PlanetRef()local function a(b)return type(b)=='number'end;local function c(b)return type(tonumber(b))=='number'end;local function d(t)return type(t)=='table'end;local function e(f)return type(f)=='string'end;local function g(h)return d(h)and a(h.x and h.y and h.z)end;local function i(j)return d(j)and a(j.latitude and j.longitude and j.altitude and j.bodyId and j.systemId)end;local k=math.pi/180;local l=180/math.pi;local m=1e-10;local n=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local o='::pos{'..n..','..n..','..n..','..n..','..n..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local clamp=utils.clamp;local function p(q,r)if q==0 then return math.abs(r)<1e-09 end;if r==0 then return math.abs(q)<1e-09 end;return math.abs(q-r)<math.max(math.abs(q),math.abs(r))*m end;local function s(b)local u=string.gsub(string.reverse(string.format('%.4f',b)),'^0*%.?','')return u==''and'0'or string.reverse(u)end;local function v(w)if g(w)then return string.format('{x=%.3f,y=%.3f,z=%.3f}',w.x,w.y,w.z)end;if d(w)and not getmetatable(w)then local x={}local y=next(w)if type(y)=='nil'or y==1 then for z,q in ipairs(w)do x[z]=v(q)end else for A,h in pairs(w)do local B=v(h)if type(A)=='number'then table.insert(x,string.format('[%s]=%s',A,B))else table.insert(x,string.format('%s=%s',A,B))end end end;return string.format('{%s}',table.concat(x,','))end;if e(w)then return string.format(\"[[%s]]\",w)end;return tostring(w)end;local C={}C.__index=C;C.__tostring=function(w,D)local E={}for A in pairs(w)do table.insert(E,A)end;table.sort(E)local x={}for F,A in ipairs(E)do local B=v(w[A])if type(A)=='number'then table.insert(x,string.format('[%s]=%s',A,B))else table.insert(x,string.format('%s=%s',A,B))end end;if D then return string.format('%s%s',D,table.concat(x,',\\n'..D))end;return string.format('{%s}',table.concat(x,','))end;C.__eq=function(G,H)return G.planetarySystemId==H.planetarySystemId and G.bodyId==H.bodyId and p(G.radius,H.radius)and p(G.center.x,H.center.x)and p(G.center.y,H.center.y)and p(G.center.z,H.center.z)and p(G.GM,H.GM)end;local function I(J,K,L,M,N)assert(c(J),'Argument 1 (planetarySystemId) must be a number:'..type(J))assert(c(K),'Argument 2 (bodyId) must be a number:'..type(K))assert(c(L),'Argument 3 (radius) must be a number:'..type(L))assert(d(M),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(M))assert(c(N),'Argument 5 (GM) must be a number:'..type(N))return setmetatable({planetarySystemId=tonumber(J),bodyId=tonumber(K),radius=tonumber(L),center=vec3(M),GM=tonumber(N)},C)end;local O={}O.__index=O;O.__tostring=function(P)return string.format('::pos{%d,%d,%s,%s,%s}',P.systemId,P.bodyId,s(P.latitude*l),s(P.longitude*l),s(P.altitude))end;O.__eq=function(G,H)return G.bodyId==H.bodyId and G.systemId==H.systemId and p(G.latitude,H.latitude)and p(G.altitude,H.altitude)and(p(G.longitude,H.longitude)or p(G.latitude,math.pi/2)or p(G.latitude,-math.pi/2))end;local function Q(R,K,S,T,U)local J=R;if e(R)and not T and not U and not K and not S then J,K,S,T,U=string.match(R,o)assert(J,'Argument 1 (position string) is malformed.')else assert(c(J),'Argument 1 (systemId) must be a number:'..type(J))assert(c(K),'Argument 2 (bodyId) must be a number:'..type(K))assert(c(S),'Argument 3 (latitude) must be in degrees:'..type(S))assert(c(T),'Argument 4 (longitude) must be in degrees:'..type(T))assert(c(U),'Argument 5 (altitude) must be in meters:'..type(U))end;J=tonumber(J)K=tonumber(K)S=tonumber(S)T=tonumber(T)U=tonumber(U)if K==0 then return setmetatable({latitude=S,longitude=T,altitude=U,bodyId=K,systemId=J},O)end;return setmetatable({latitude=k*clamp(S,-90,90),longitude=k*(T%360),altitude=U,bodyId=K,systemId=J},O)end;local V={}V.__index=V;V.__tostring=function(w,D)local W=D and D..'  'local X={}local E={}for A in pairs(w)do table.insert(E,A)end;table.sort(E)for F,Y in ipairs(E)do bdy=w[Y]local Z=C.__tostring(bdy,W)if D then table.insert(X,string.format('[%s]={\\n%s\\n%s}',Y,Z,D))else table.insert(X,string.format('  [%s]=%s',Y,Z))end end;if D then return string.format('\\n%s%s%s',D,table.concat(X,',\\n'..D),D)end;return string.format('{\\n%s\\n}',table.concat(X,',\\n'))end;local function _(a0)local a1={}local a2;for F,h in pairs(a0)do local a3=h.planetarySystemId;if a3==nil then a3=0;h.planetarySystemId=a3 end;if type(a3)~='number'then error('Invalid planetary system ID: '..tostring(a3))elseif a2 and a3~=a2 then error('Mismatch planetary system IDs: '..a3 ..' and '..a2)end;local a4=h.bodyId;if a4==nil then a4=h.id;h.bodyId=a4 end;if type(a4)~='number'then error('Invalid body ID: '..tostring(a4))elseif a1[a4]then error('Duplicate body ID: '..tostring(a4))end;h.center=vec3(h.center)a1[a4]=setmetatable(h,C)a2=a3 end;return setmetatable(a1,V)end;PlanetaryReference={}local function a5(a6)return setmetatable({galaxyAtlas=a6 or{}},PlanetaryReference)end;PlanetaryReference.__index=function(t,z)if type(z)=='number'then local system=t.galaxyAtlas[z]return _(system)end;return rawget(PlanetaryReference,z)end;PlanetaryReference.__pairs=function(w)return function(t,A)local a7,a8=next(t,A)return a7,a8 and _(a8)end,w.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(w)local a9={}for F,aa in pairs(w or{})do local ab=aa:getPlanetarySystemId()local ac=V.__tostring(aa,'    ')table.insert(a9,string.format('  [%s]={%s\\n  }',ab,ac))end;return string.format('{\\n%s\\n}\\n',table.concat(a9,',\\n'))end;PlanetaryReference.BodyParameters=I;PlanetaryReference.MapPosition=Q;PlanetaryReference.PlanetarySystem=_;function PlanetaryReference.createBodyParameters(ad,K,ae,af,ag,ah,ai)assert(c(ad),'Argument 1 (planetarySystemId) must be a number:'..type(ad))assert(c(K),'Argument 2 (bodyId) must be a number:'..type(K))assert(c(ae),'Argument 3 (surfaceArea) must be a number:'..type(ae))assert(d(af),'Argument 4 (aPosition) must be an array or vec3:'..type(af))assert(d(ag),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(ag))assert(c(ah),'Argument 6 (altitude) must be in meters:'..type(ah))assert(c(ai),'Argument 7 (gravityAtPosition) must be number:'..type(ai))local L=math.sqrt(ae/4/math.pi)local aj=L+ah;local ak=vec3(af)+aj*vec3(ag)local N=ai*aj*aj;return I(ad,K,L,ak,N)end;PlanetaryReference.isMapPosition=i;function PlanetaryReference:getPlanetarySystem(R)if self.galaxyAtlas then local ad=R;if i(R)then ad=R.systemId end;if type(ad)=='number'then local system=self.galaxyAtlas[ad]if system then if getmetatable(system)~=V then system=_(system)end;return system end end end;return nil end;function V:castIntersections(al,am,an,ao)local an=an or function(ap)return 1.05*ap.radius end;local aq={}if ao then for F,z in ipairs(ao)do aq[z]=self[z]end else ao={}for A,ap in pairs(self)do table.insert(ao,A)aq[A]=ap end end;local function ar(as,at)local au=aq[as].center-al;local av=aq[at].center-al;return au:len()<av:len()end;table.sort(ao,ar)local aw=am:normalize()for z,a3 in ipairs(ao)do local ap=aq[a3]local ax=ap.center-al;local L=an(ap)local ay=ax:dot(aw)local az=ay^2-(ax:len2()-L^2)if az>=0 then local aA=math.sqrt(az)local aB=ay+aA;local aC=ay-aA;if aC>0 then return ap,aB,aC elseif aB>0 then return ap,aB,nil end end end;return nil,nil,nil end;function V:closestBody(aD)assert(type(aD)=='table','Invalid coordinates.')local aE,ap;local aF=vec3(aD)for F,aG in pairs(self)do local aH=aG.center-aF:len2()if not ap or aH<aE then ap=aG;aE=aH end end;return ap end;function V:convertToBodyIdAndWorldCoordinates(R)local aI=R;if e(R)then aI=Q(R)end;if aI.bodyId==0 then return 0,vec3(aI.latitude,aI.longitude,aI.altitude)end;local aG=self:getBodyParameters(aI)if aG then return aI.bodyId,aG:convertToWorldCoordinates(aI)end end;function V:getBodyParameters(R)local K=R;if i(R)then K=R.bodyId end;assert(c(K),'Argument 1 (bodyId) must be a number:'..type(K))return self[K]end;function V:getPlanetarySystemId()local A,h=next(self)return h and h.planetarySystemId end;function V:netGravity(aD)assert(type(aD)=='table','Invalid coordinates.')local aJ=vec3()local aF=vec3(aD)local aK,ap;for F,aG in pairs(self)do local aL=aG.center-aF;local aM=aL:len2()local aN=aG.GM/aM;if not ap or aN>aK then ap=aG;aK=aN end;aJ=aJ+aN/math.sqrt(aM)*aL end;return ap,aJ end;function C:convertToMapPosition(M)assert(d(M),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(M))local aO=vec3(M)if self.bodyId==0 then return setmetatable({latitude=aO.x,longitude=aO.y,altitude=aO.z,bodyId=0,systemId=self.planetarySystemId},O)end;local aP=aO-self.center;local aj=aP:len()local U=aj-self.radius;local S=0;local T=0;if not p(aj,0)then local aQ=math.atan(aP.y,aP.x)T=aQ>=0 and aQ or 2*math.pi+aQ;S=math.pi/2-math.acos(aP.z/aj)end;return setmetatable({latitude=S,longitude=T,altitude=U,bodyId=self.bodyId,systemId=self.planetarySystemId},O)end;function C:convertToWorldCoordinates(R)local aI=e(R)and Q(R)or R;if aI.bodyId==0 then return vec3(aI.latitude,aI.longitude,aI.altitude)end;assert(i(aI),'Argument 1 (mapPosition) is not an instance of \"MapPosition\".')assert(aI.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(aI.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local aR=math.cos(aI.latitude)return self.center+(self.radius+aI.altitude)*vec3(aR*math.cos(aI.longitude),aR*math.sin(aI.longitude),math.sin(aI.latitude))end;function C:getAltitude(M)return vec3(M)-self.center:len()-self.radius end;function C:getDistance(M)return vec3(M)-self.center:len()end;function C:getGravity(M)local aL=self.center-vec3(M)local aM=aL:len2()return self.GM/aM*aL/math.sqrt(aM)end;return setmetatable(PlanetaryReference,{__call=function(F,...)return a5(...)end})end;function Kinematics()local q={}local r=30000000/3600;local aS=r*r;local aT=100;local function aU(aV)return 1/math.sqrt(1-aV*aV/aS)end;function q.computeAccelerationTime(aN,aW,z)local aX=r*math.asin(aN/r)return(r*math.asin(z/r)-aX)/aW end;function q.computeDistanceAndTime(aN,z,A,aY,j,b)j=j or 0;b=b or 0;local aZ=aU(aN)local P=aN<=z;local a_=aY*(P and 1 or-1)/A;local b0=-b/A;local f=a_+b0;if P and f<=0 or not P and f>=0 then return-1,-1 end;local t,b1=0,0;if a_~=0 and j>0 then local aX=math.asin(aN/r)local h=math.pi*(a_/2+b0)local b2=a_*j;local b3=r*math.pi;local aV=function(b4)local b5=(h*b4-b2*math.sin(math.pi*b4/2/j)+b3*aX)/b3;local b6=math.tan(b5)return r*b6/math.sqrt(b6*b6+1)end;local b7=P and function(b8)return b8>=z end or function(b8)return b8<=z end;b1=2*j;if b7(aV(b1))then local b9=0;while math.abs(b1-b9)>0.5 do local b4=(b1+b9)/2;if b7(aV(b4))then b1=b4 else b9=b4 end end end;local ba=aN;local bb=b1/aT;for bc=1,aT do local bd=aV(bc*bb)t=t+(bd+ba)*bb/2;ba=bd end;if b1<2*j then return t,b1 end;aN=ba end;local aX=r*math.asin(aN/r)local be=(r*math.asin(z/r)-aX)/f;local bf=aS*math.cos(aX/r)/f;local bg=bf-aS*math.cos((f*be+aX)/r)/f;return bg+t,be+b1 end;function q.computeTravelTime(aN,aW,bg)if bg==0 then return 0 end;if aW>0 then local aX=r*math.asin(aN/r)local bf=aS*math.cos(aX/r)/aW;return(r*math.acos(aW*(bf-bg)/aS)-aX)/aW end;assert(aN>0,'Acceleration and initial speed are both zero.')return bg/aN end;function q.lorentz(aV)return aU(aV)end;return q end;core=nil;antigrav=nil;warpDrive=nil;radarUnit=nil;flightModeDb=nil;manualSwitches={}forceFields={}laser=nil;screen=nil;settingsActive=false;emitter=nil;telemeter=nil;function getElements()for q,r in pairs(_G)do if type(r)==\"table\"and r[\"getClass\"]then local aS=r[\"getClass\"]()if aS==\"CoreUnitDynamic\"or aS==\"CoreUnitStatic\"or aS==\"CoreUnitSpace\"then core=r end;if aS==\"AtmoFuelContainer\"or aS==\"SpaceFuelContainer\"then r.showWidget()end;if aS==\"WarpDriveUnit\"then warpDrive=r;r.showWidget()end;if aS==\"RadarPvPAtmospheric\"or aS==\"RadarPvPSpace\"then radarUnit=r;r.showWidget()end;if aS==\"DataBankUnit\"then flightModeDb=r end;if aS==\"AntiGravityGeneratorUnit\"then antigrav=r end;if aS==\"ManualSwitchUnit\"then table.insert(manualSwitches,r)end;if aS==\"ForceFieldUnit\"then table.insert(forceFields,r)end;if aS==\"ScreenUnit\"then screen=r end;if aS==\"LaserEmitterUnit\"then laser=r end;if aS==\"EmitterUnit\"then emitter=r end;if aS==\"TelemeterUnit\"then telemeter=r end end end end;getElements()local bh=table.concat;local bi=string.format;local function bj(h,bk,t)local bl=type(h)local bm=bj;if bl=='table'then t[bk]='{'local bn=bk+1;if#h==0 then for A,aU in pairs(h)do if type(A)~='number'then t[bn]=A;t[bn+1]='='bn=bn+2 else t[bn]='['t[bn+1]=A;t[bn+2]=']='bn=bn+3 end;bn=bm(aU,bn,t)t[bn]=','bn=bn+1 end else for A,aU in pairs(h)do bn=bm(aU,bn,t)t[bn]=','bn=bn+1 end end;if bn==bk+1 then t[bn]='}'return bn+1 else t[bn-1]='}'return bn end elseif bl=='string'then t[bk]=bi(\"%q\",h)return bk+1 elseif bl=='number'then t[bk]=tostring(h)return bk+1 else t[bk]=h and'true'or'false'return bk+1 end end;function serialize(h)local t={}local bk=1;local bl=type(h)local bm=bj;if bl=='table'then t[bk]='{'bk=bk+1;local bn=bk;if#h==0 then for A,aU in pairs(h)do if type(A)~='number'then t[bn]=A;t[bn+1]='='bn=bn+2 else t[bn]='['t[bn+1]=A;t[bn+2]=']='bn=bn+3 end;bn=bm(aU,bn,t)t[bn]=','bn=bn+1 end else for A,aU in pairs(h)do bn=bm(aU,bn,t)t[bn]=','bn=bn+1 end end;if bn==bk then t[bn]='}'else t[bn-1]='}'end elseif bl=='string'then t[bk]=bi(\"%q\",h)elseif bl=='number'then t[bk]=tostring(h)else t[bk]=h and'true'or'false'end;return bh(t)end;function deserialize(f)local aV=load('t='..f)aV()return t end;function tryDeserialize(f)local aV=load('t='..f)if aV then aV()return true,t else return false end end;function mToKm(b)if b==nil then return\"nan\"end;if b>=1000 then return round2(b/1000,2)..\" km\"end;return round2(b,2)..\" m\"end;function round2(n,bo)if n~=nil then return tonumber(string.format(\"%.\"..(bo or 0)..\"f\",n))or 0 end;return 0 end;config={dataType=\"config\",floors={floor1=0,floor2=0,floor3=0,floor4=0},elevatorName=construct.getName(),rtb=0,targetAlt=0,estop=false,settingsActive=false,setBaseActive=false,setBaseReq=false,manualControl=false,destination=nil,shutDown=false,updateReq=false}stats={dataType=\"stats\",data={elevation=0,target=config.targetAlt,velocity=0,mass=0,gravity=0,target_dist=0,brake_dist=0,deviation=0,deviationVec=vec3(0,0,0),deviationRot=vec3(0,0,0),state=\"Idle\",delta=0}}fuelAtmo={dataType=\"fuelAtmo\",tanks={}}fuelSpace={dataType=\"fuelSpace\",tanks={}}function fuelTank(bp,bq)local br={}br.__index=br;return setmetatable({tm=bp,pct=bq},br)end;function EventDelegate()local q={}q.Delegates={}function q.Add(r)if type(r)~=\"function\"then error(\"[EventDelegate] Unable to add callback - not a function\")return end;for aS=1,#q.Delegates do if q.Delegates[aS]==r then return false end end;table.insert(q.Delegates,r)return true end;function q.Remove(r)if type(r)~=\"function\"then error(\"[EventDelegate] Unable to remove callback - not a function\")return end;for aS=1,#q.Delegates do if q.Delegates[aS]==r then table.remove(q.Delegates,aS)return true end end;return false end;function q.Call(...)for aS=1,#q.Delegates do q.Delegates[aS](...)end end;function q.Count()return#q.Delegates end;setmetatable(q,{__call=function(aT,...)q.Call(...)end,__add=function(aU,aV)if aU==q then q.Add(aV)return q end;if aV==q then q.Add(aU)return q end;return q end,__sub=function(aU,aV)if aU==q then q.Remove(aV)return q end;if aV==q then q.Remove(aU)return q end;return q end,__tostring=function()return\"EventDelegate(#\"..#q.Delegates..\")\"end})return q end;Events={Update=EventDelegate(),Flush=EventDelegate()}TaskManager=function()local self={}self.Stack={}function self.Register(q)if not q.Coroutine then error(\"[TaskManager] Trying to register a non-Task\")end;table.insert(self.Stack,q)end;function self.Update()for r=1,#self.Stack do local q=self.Stack[r]if q and q.Coroutine~=nil then if coroutine.status(q.Coroutine)~=\"dead\"then local aS,aT=coroutine.resume(q.Coroutine)q.Error=not aS;q.LastReturn=aT else table.remove(self.Stack,r)if q.Error and q._Catch then q._Catch(q.LastReturn)elseif q._Then~=nil then q._Then(q.LastReturn)end;if q._Finally~=nil then q._Finally()end;q.Finished=true end end end end;return self end()function Task(aU)local self={}self.LastReturn=nil;self.Error=nil;self.Finished=false;if type(aU)~=\"function\"then error(\"[Task] Not a function.\")end;self.Coroutine=coroutine.create(aU)function self.Then(aU)if type(aU)~=\"function\"then error(\"[Task] Then callback not a function.\")end;self._Then=aU;return self end;function self.Finally(aU)if type(aU)~=\"function\"then error(\"[Task] Finally callback not a function.\")end;self._Finally=aU;return self end;function self.Catch(aU)if type(aU)~=\"function\"then error(\"[Task] Catch callback not a function.\")end;self._Catch=aU;return self end;TaskManager.Register(self)return self end;function await(q)if not q or not q.Coroutine then error(\"Trying to await non-task object\")end;while not q.Finished do coroutine.yield()end;return q.LastReturn end;function DynamicDocument(q)local self={}self.template=q or\"\"local r=\"\"local aS={}self.tree={}local aT={br=true,hr=true,img=true,embed=true,param=true,area=true,col=true,input=true,meta=true,link=true,base=true,basefont=true,iframe=true,isindex=true,circle=true,polygon=true,polyline=true,ellipse=true,path=true,line=true,rect=true,use=true}function table.indexOf(val,table)for aU,aV in ipairs(table)do if aV==val then return aU end end;return nil end;function self.makeFunc(string)local val=\"nil\"if aS[string]==nil then local aN,aW=pcall(load(\"return function() return \"..string..\" end\",nil,\"t\",_ENV))if aN then aS[string]=aW;val=aW()if type(val)==\"function\"then aS[string]=aW()val=val()end end else val=aS[string]()end;return val end;local function z(q)local aX=0;local A={}local aY={}aY.dd={}table.insert(A,aY)local node={}for j,b,aZ,P,a_,b0,val,f in string.gmatch(q,\"(<)(%/?!?)([%w:_-'\\\\\\\"%[]+)(.-)(%/?%-?)>([%s\\r\\n\\t]*)([^<]*)([%s\\r\\n\\t]*)\")do aZ=string.lower(aZ)if b==\"/\"then if aX==0 then return aY end;aX=aX-1;table.remove(A)else local function t(b1)local h=\"dd-\"return b1:sub(1,#h)==h end;aX=aX+1;node={}node.name=aZ;node.children={}node.attr={}if A[aX-1]then node.parent=A[aX-1][#A[aX-1]]else node.parent=nil end;if P~=\"\"then for b2,aV in string.gmatch(P,\"%s([^%s=]+)=\\\"([^\\\"]+)\\\"\")do node.attr[b2]=string.gsub(aV,'\"','[^\\\\]\\\\\"')if t(b2)then if not aY.dd[b2]then aY.dd[b2]={}end;table.insert(aY.dd[b2],node)end end;for b2,aV in string.gmatch(P,\"%s([^%s=]+)='([^']+)'\")do node.attr[b2]=string.gsub(aV,'\"','[^\\\\]\\\\\"')if t(b2)then if not aY.dd[b2]then aY.dd[b2]={}end;table.insert(aY.dd[b2],node)end end end;if not A[aX]then A[aX]={}end;table.insert(A[aX],node)if aT[aZ]then if val~=\"\"then table.insert(A[aX],{name=\"textNode\",value=val})end;node.children={}aX=aX-1 else if val~=\"\"then table.insert(node.children,{name=\"textNode\",value=val})end;table.insert(A,node.children)end end end;return aY end;local function b3(b4,b5)local A={b4}local b6=\"\"local function b7(b8)local b9=0;for ba in pairs(b8)do b9=b9+1 end;return b9 end;if not b5 and b7(b4.dd)>0 then if b4.dd[\"dd-repeat\"]then for bb=#b4.dd[\"dd-repeat\"],1,-1 do local node=b4.dd[\"dd-repeat\"][bb]var,array=string.match(node.attr[\"dd-repeat\"],\"(.*) in (.*)\")node.attr[\"dd-repeat\"]=nil;local bc=b3({node},true)local bd=string.gmatch(bc,\"{{([^}}]+)}}\")local be={}for bf in bd do if string.match(bf,var)then table.insert(be,bf)end end;local r=\"\"local bg=self.makeFunc(array)for bb=1,#bg do _ENV[var]=bg[bb]local bs=bc;local bt=z(bs:gsub(\"^%s*(.-)%s*$\",\"%1\"))r=r..b3(bt)end;node.children={}node.name=\"textNode\"node.value=r end end;if b4.dd[\"dd-if\"]then for bb=#b4.dd[\"dd-if\"],1,-1 do local node=b4.dd[\"dd-if\"][bb]local bu=self.makeFunc(node.attr[\"dd-if\"])if bu then node.attr[\"dd-if\"]=nil else local bv=table.indexOf(node,node.parent.children)if bv then table.remove(node.parent.children,bv)end;node=nil;table.remove(b4.dd[\"dd-if\"],bb)b4.dd[\"dd-if\"][bb]=nil end end end;if b4.dd[\"dd-init\"]then for bb=#b4.dd[\"dd-init\"],1,-1 do local node=b4.dd[\"dd-init\"][bb]pcall(load(node.attr[\"dd-init\"],nil,\"t\",_ENV))node.attr[\"dd-init\"]=nil end end end;while#A~=0 do node=A[#A][1]if not node then break end;if node.name==\"textNode\"then local val=node.value:gsub(\"^%s*(.-)%s*$\",\"%1\")if not b5 then val=self.transformClosures(val)end;b6=b6 ..val else b6=b6 ..\"\\n\"..string.rep(\" \",#A-1)b6=b6 ..\"<\"..node.name;if node.attr then for bw,aV in pairs(node.attr)do if not b5 then bw=self.transformClosures(bw)aV=self.transformClosures(aV)end;b6=b6 ..\" \"..bw..'=\"'..aV..'\"'end end;if aT[node.name]then b6=b6 ..\"/>\"else b6=b6 ..\">\"end end;if node.children and#node.children>0 then table.insert(A,node.children)else table.remove(A[#A],1)if node.children and#node.children==0 and not aT[node.name]and not node.name==\"textNode\"then b6=b6 ..\"</\"..node.name..\">\"end;while#A>0 and#A[#A]==0 do table.remove(A)if#A>0 then if#A[#A][1].children>1 then b6=b6 ..\"\\n\"..string.rep(\" \",#A-1)..\"</\"..A[#A][1].name..\">\"else b6=b6 ..\"</\"..A[#A][1].name..\">\"end;table.remove(A[#A],1)end end end end;return b6:match\"^%s*(.-)%s*$\"end;function self.transformClosures(bx)local by={}local bz=string.gmatch(bx,\"{{([^}}]+)}}\")for bb in bz do table.insert(by,bb)end;if#by>0 then for bb=1,#by do local bA=by[bb]val=self.makeFunc(bA)bx=string.gsub(bx,self.literalize(\"{{\"..bA..\"}}\"),tostring(val))end end;return bx end;function self.literalize(b1)return b1:gsub(\"[%(%)%.%%%+%-%*%?%[%]%^%$]\",function(bf)return\"%\"..bf end)end;function self.Read()return b3(z(self.template))end;return self end;DUTTY={}local q={}local r={}local function aS(aT,aU)return aT:sub(aU,aU)end;local function aV(aT)local aN={}local aW=false;local z=''local aX=false;for A=1,#aT do local aY=aS(aT,A)if aX==false and aW and aY==aW then table.insert(aN,z)aW=false;z=''elseif aX==false and#z==0 and(not aW and(aY=='\"'or aY==\"'\"))then aW=aY elseif aX==false and aY==' 'and aW==false then if#z>0 then table.insert(aN,z)z=''end elseif aX==false and aY=='\\\\'then aX=true else if aX then aX=false end;z=z..aY end end;if#z>0 then table.insert(aN,z)end;return aN end;function DUTTY.input(aT)for A,j in pairs(q)do if'function'==type(j)then j(aT)end end;local b=aV(aT)if#b>0 then local aZ=''local P={}for A,aT in pairs(b)do if A==1 then aZ=aT:lower()else table.insert(P,aT)end end;if r[aZ]and'function'==type(r[aZ])then r[aZ](table.unpack(P))end end end;function DUTTY.onInput(j)if not'function'==type(j)then error('Event handler must be of type function')end;table.insert(q,j)end;function DUTTY.onCommand(aN,j)if not'function'==type(j)then error('Event handler must be of type function')end;r[aN:lower()]=j end;displaySize=0.85;system.print(fuelFontSize)CSS_SHUD=[[\n#horizon { \n  left: 0;\n  top: 0;\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  background: radial-gradient(ellipse 27vw 11vw at 50% 51vw, rgba(1,5,8,0.6) 50%,rgba(1,5,8,0) 90%);\n  font-family: Verdana;\n  \n}\n\n#speedometer::before {\n  display: block;\n  position: absolute;\n  content: ' ';\n  top: 0.25vh;\n  bottom: -17vh;\n  left: 50%;\n  width: 31vw;\n  border: 10px solid #]]..primaryColor..[[;\n  border-bottom: 0;\n  border-right: 0;\n  border-left: 0;\n  border-radius: 100%;\n  transform: translateX(-50%);\n  background-color: transparent;\n  filter: blur(100vw);\n}\n\n#speedometerBar {\n  display: block;\n  position: fixed;\n  left: 50%;\n  top: 77.2vh;\n  width: 30vw;\n  height: 24.5vh;\n  transform: translate(-50%);\n  content: ' ';\n  border: 10px solid #]]..primaryColor..[[;\n  border-bottom: 0;\n  border-right: 0;\n  border-left: 0;\n  border-radius: 100%;\n  background-size: contain;\n  background-color: transparent;\n  filter: blur(0.1vw);\n}\n\n#speedometer {\n  font-family: 'Verdana';\n  font-weight: normal;\n  font-style: normal;\n  position: fixed;\n  left: 50%;\n  bottom: 13vh;\n  font-size: 2.5vw;\n  transform: translate(-50%);\n  background-color: transparent;\n  width: 30vw;\n  height: 10vh;\n  text-align: center;\n}\n\n#speedometer .display {\n  position: absolute;\n  top: calc(50% + 1vh);\n  left: calc(50% + 0.25em);\n  transform: translate(-50%, -50%);\n  font-weight: bold;\n  text-shadow: 0 0 0.75vw #]]..textShadow..[[;\n  padding: 0;\n  margin: 0;\n  font-size: 2.8vw;\n}\n\n#speedometer .display .minor, #speedometer .unit {\n  position: relative;\n  left: -0.5em;\n  vertical-align: super;\n  font-size: 40%;\n}\n\n#speedometer .unit {\n  vertical-align: 50%;\n  font-size: 23%;\n  left: -1.33em;\n}\n\n#speedometer .accel {\n  font-size: 1.2vw;\n  text-shadow: 0 0 0.15vw #000000;\n  position: absolute;\n  left: 12.5%;\n  bottom: 0;\n  opacity: 0.75;\n}\n\n#speedometer .accel .major::before {\n  content: 'Δ';\n  font-size: 40%;\n}\n\n#speedometer .accel .unit {\n  left: -0.66em;\n}\n\n#speedometer .alt {\n  position: absolute;\n  left: 50%;\n  bottom: -0.65vh;\n  transform: translateX(-50%);\n  font-size: 0.65vw;\n  text-align: center;\n}\n\n#speedometer .misc {\n  position: absolute;\n  left: 50%;\n  bottom: -1.5vh;\n  transform: translateX(-50%);\n  font-size: 0.4vw;\n  text-align: center;\n}\n\n#speedometer .throttle {\n  position: absolute;\n  left: 50%;\n  bottom: -4.3vh;\n  transform: translateX(-50%);\n  font-size: 0.7vw;\n  text-align: center;\n}\n\n#speedometer .vertical {\n  font-size: 1.3vw;\n  text-shadow: 0 0 0.15vw #000000;\n  position: absolute;\n  right: 12.5%;\n  bottom: 0;\n  opacity: 0.75;\n  text-align: right;\n}\n\n#speedometer .vertical::after {\n  content: '↕ m/s';\n  vertical-align: 50%;\n  font-size: 33%;\n}\n\n#speedometer::after {\n  display: block;\n  font-size: 0;\n  background-size: contain;\n  content: ' ';\n  position: absolute;\n  top: 0.5vh;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 666;\n  opacity: 0.5;\n}\n\n#horizon-menu {\n  text-transform: uppercase;\n  font-family: 'Verdana';\n  font-size: ]]..displaySize..[[vw;\n  display: flex;\n  flex-direction: column;\n  position: fixed;\n  bottom: 35%;\n  left: 2vw;\n  width: 18vw;\n  padding: 1vw;\n  transform: perspective(50vw) rotateY(35deg);\n  text-shadow: 0.1vw 0 0.25vw #000000;\n}\n#horizon-menu .item {\n  color: #fff;\n  padding: 0.2vw 0.5vw;\n  z-index: 99999;\n}\n#horizon-menu .item .right {\n  float: right;\n}\n#horizon-menu .item .red {\n  color: #]]..secondaryColor..[[;\n}\n#horizon-menu .item.active {\n  position: relative;\n  text-shadow: 0 0 0.75vw #]]..secondaryColor..[[;\n  transform: translateZ(0.33vw);\n  font-size: 1.15em;\n  transform-style: preserve-3d;\n}\n\n#horizon-menu .item.active::before {\n  display: block;\n  content: ' ';\n  position: absolute;\n  top: 15%;\n  bottom: 15%;\n  left: 0.1vw;\n  right: 0.1vw;\n  background: #]]..secondaryColor..[[aa;\n  z-index: -50;\n  filter: blur(1vw);\n  opacity: 0.2;\n}\n\n#horizon-menu .item.active::after {\n  display: block;\n  content: ' ';\n  position: absolute;\n  top: 20%;\n  bottom: 40%;\n  left: 0.1vw;\n  right: 0.1vw;\n  background: #]]..secondaryColor..[[aa;\n  z-index: -50;\n  filter: blur(0.2vw);\n  opacity: 0.3; \n}\n#horizon-menu .item.locked {\n  padding-left: 0.4vw;\n}\n#horizon-menu .item.locked::before {\n  display: block;\n  content: ' ';\n  position: absolute;\n  top: 15%;\n  bottom: 15%;\n  left: 0.1vw;\n  right: 0.1vw;\n  background: #]]..primaryColor..[[aa;\n  z-index: -50;\n  filter: blur(1vw);\n  opacity: 0.2;\n}\n#horizon-menu .item.locked::after {\n  display: block;\n  content: ' ';\n  position: absolute;\n  top: 20%;\n  bottom: 40%;\n  left: 0.1vw;\n  right: 0.1vw;\n  background: #]]..primaryColor..[[aa;\n  z-index: -50;\n  filter: blur(0.2vw);\n  opacity: 0.6; \n}\n\n#horizon-menu::after {\n  content: ' ';\n  filter: blur(1vw);\n  display: block;\n  border-top-left-radius: 1vw;\n  border-top-right-radius: 1vw;\n  border-image: linear-gradient(to bottom, #]]..primaryColor..[[ff, #]]..primaryColor..[[00) 1 100%;\n  background: linear-gradient(to bottom, rgba(0,0,0,0.65) 50%,rgba(0,0,0,0) 100%);\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: -99;\n}\n\n#horizon-menu::before {\n  content: ' ';\n  filter: blur(0.05vw);\n  display: block;\n  border-top-left-radius: 1vw;\n  border-top-right-radius: 1vw;\n  border-top: 0.25vw solid #]]..primaryColor..[[;\n  border-left: 0.25vw solid #]]..primaryColor..[[;\n  border-right: 0.25vw solid #]]..primaryColor..[[;\n  border-image: linear-gradient(to bottom, #]]..primaryColor..[[ff, #]]..primaryColor..[[00) 1 100%;\n  background: radial-gradient(ellipse at top, rgba(0,0,0,0.65) 0%,rgba(0,0,0,0) 100%);\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: -100;\n}\n\n/* ORE TRILATERATE STYLE */\n\np {\n  /*color:#eca943;*/\n   font-size:100%;\n  }\n\n.block {\n  border: 1px solid DimGray;\n  border-radius:10px;\n  background-color: rgba(0,0,0,.5)\n  }\n\n#main_block{\n  text-align: center;\n  padding: 10px 10px 10px 10px;\n  }\n\n#help_block{\n  text-align: left;\n  padding: 10px 10px 10px 10px;\n  width: 320px;\n  }\t\n\n#pause_block{        \ntext-align: center;\n  font-size:90%;\n  }\n\n#panel_left {  \n  position: absolute;\n  top: 0%;\nleft: 0%;\n  /*width: 310px;*/\n\n  }\n#slider_header {\n  position: absolute;\n  top: 0vh;\n  font-size:110%;\nwidth: 100%;\ntext-align: center;\t   \n  }\n\n\n#slider_main {\n  position: relative;\n  font-size:105%;\ncolor:#eca943;\n  /*left: -51%;/*0%*/*/\n  }\n\n#slider_footer{\n  position: relative;\n  font-size:120%;\n  top:80%;\n  left:10%; \n  }\n\n#panel_slider {\n  position: absolute;\n  top: 54.5vh; ;\n  left: 66.8vw;/*66.8vw;*/\n  width: 9vw;/*9vw;*/\n  height: 28.5vh;\n  transform: skew(15.85deg); /*15.85deg*/\n  border-bottom: 28.5vh solid rgba(0,0,0,.25);\n  border-right: 1vw solid transparent;\n  /*background-color:rgba(0,0,0,.75)*/  \t\n  }\n\n#panel_test {  \n  position: fixed;\n  top: 100px; /* or whatever top you need */\nleft: 50%;\nwidth: auto;\n-webkit-transform: translateX(-50%);\n-moz-transform: translateX(-50%);\n-ms-transform: translateX(-50%);\n-o-transform: translateX(-50%);\ntransform: translateX(-50%);\n}\n#fuelTanks {\n  position: absolute;\n  top: 2%;\n  left: 2%;\n  width: 12vw;\n  height: 15vh;\n  color: #1b1b1b;\n  font-family: Verdana;\n  font-size: 1vh;\n  text-align: center;\n}\n#fuelTanks .fuel-meter {\n  display: block;\n  position: relative;\n  z-index: 1;\n  border-radius: 0.5em;\n  background: #c6c6c6;\n  padding: 0.5em 1em;\n  margin-bottom: 0.5em;\n  overflow: hidden;\n  box-sizing: border-box;\n}\n#fuelTanks .fuel-meter .fuel-level {\n  display: block;\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  bottom: 0px;\n  z-index: -1;\n  border: 0px none;\n  margin: 0;\n  padding: 0;\n}\n#fuelTanks .fuel-meter.fuel-type-atmo .fuel-level { background: #1dd1f9; }\n#fuelTanks .fuel-meter.fuel-type-space .fuel-level { background: #fac31e; }\n#fuelTanks .fuel-meter.fuel-type-rocket .fuel-level { background: #bfa6ff; }\n.st0{fill:none;stroke:#]]..ARCrosshair..[[;stroke-width:1;stroke-miterlimit:10;}\n.st1{fill:none;stroke:#]]..ARCrosshair..[[;stroke-width:2;stroke-miterlimit:10;}\n.st2{fill:#]]..ARCrosshair..[[;stroke:#]]..ARCrosshair..[[;stroke-miterlimit:10;}\n.st3{fill:#]]..ARCrosshair..[[; font-family: Verdana; font-size:10.5px;}\n.shadow {\n  -webkit-filter: drop-shadow( 3px 3px 2px rgba(0, 0, 0, .7));\n  filter: drop-shadow( 3px 3px 2px rgba(0, 0, 0, .7));\n}\n]]fuelTanks={}FuelMass={}FuelTime={}fuelTypes={atmo={density=4.000},space={density=6.000},rocket={density=0.800}}local function bB(bC)if fuelTankHandlingAtmo>0 then return bC+bC*fuelTankHandlingAtmo*0.2 end;return bC end;local function bD(bC)if fuelTankHandlingSpace>0 then return bC+bC*fuelTankHandlingSpace*0.2 end;return bC end;local function bE(bF,type)local bG=bF*fuelTypes[type].density;local bH=bG;if ContainerOptimization>0 then bH=bG-bG*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bH=bH-bG*FuelTankOptimization*0.05 end;return bH end;function normalizeHp(type,bI)local bJ=0;if type==\"atmo\"then if bI>=50 and bI<163 then bJ=50 elseif bI>=163 and bI<1315 then bJ=163 elseif bI>=1315 and bI<10461 then bJ=1315 elseif bI>=10461 then bJ=10461 end elseif type==\"space\"then if bI>=50 and bI<187 then bJ=50 elseif bI>=187 and bI<1496 then bJ=187 elseif bI>=1496 and bI<15933 then bJ=1496 elseif bI>=15933 then bJ=15933 end elseif type==\"rocket\"then if bI>=366 and bI<736 then bJ=366 elseif bI>=736 and bI<6231 then bJ=736 elseif bI>=6231 and bI<68824 then bJ=6231 elseif bI>=68824 then bJ=68824 end end;return bJ end;function normalizeHpAtmo(bI)end;function normalizeHpSpace(bI)end;function normalizeHpRocket(bI)end;fuelTankSpecsByMaxHP={atmo={_50={type=\"atmo\",size=\"XS\",capacity=function()return bB(100)end,baseWeight=35.030,maxWeight=function()return bE(bB(100),\"atmo\")end},_163={type=\"atmo\",size=\"S\",capacity=function()return bB(400)end,baseWeight=182.670,maxWeight=function()return bE(bB(400),\"atmo\")end},_1315={type=\"atmo\",size=\"M\",capacity=function()return bB(1600)end,baseWeight=988.670,maxWeight=function()return bE(bB(1600),\"atmo\")end},_10461={type=\"atmo\",size=\"L\",capacity=function()return bB(12800)end,baseWeight=5480.000,maxWeight=function()return bE(bB(12800),\"atmo\")end}},space={_50={type=\"space\",size=\"XS\",capacity=function()return bB(100)end,baseWeight=35.030,maxWeight=function()return bE(bB(100),\"space\")end},_187={type=\"space\",size=\"S\",capacity=function()return bD(400)end,baseWeight=182.670,maxWeight=function()return bE(bB(400),\"space\")end},_1496={type=\"space\",size=\"M\",capacity=function()return bD(1600)end,baseWeight=988.670,maxWeight=function()return bE(bB(1600),\"space\")end},_15933={type=\"space\",size=\"L\",capacity=function()return bD(12800)end,baseWeight=5480.000,maxWeight=function()return bE(bB(12800),\"space\")end}},rocket={_366={type=\"rocket\",size=\"XS\",capacity=function()return 400 end,baseWeight=173.420,maxWeight=function()return bE(bB(400),\"rocket\")end},_736={type=\"rocket\",size=\"S\",capacity=function()return 800 end,baseWeight=886.720,maxWeight=function()return bE(bB(800),\"rocket\")end},_6231={type=\"rocket\",size=\"M\",capacity=function()return 6400 end,baseWeight=4720.000,maxWeight=function()return bE(bB(6400),\"rocket\")end},_68824={type=\"rocket\",size=\"L\",capacity=function()return 50000 end,baseWeight=25740.000,maxWeight=function()return bE(bB(50000),\"rocket\")end}}}local function bK(B)return B==math.huge or B==-math.huge end;local function bL(B)return B~=B end;function disp_time(bM)if bK(bM)or bL(bM)then return\"-:-\"end;local bN=math.floor(bM/86400)local bO=math.floor(math.fmod(bM,86400)/3600)local bP=math.floor(math.fmod(bM,3600)/60)local bQ=math.floor(math.fmod(bM,60))if bM>=86400 then return string.format(\"%dd:%02dh\",bN,bO)elseif bM<86400 and bM>3600 then return string.format(\"%02dh:%02dm:%02ds\",bO,bP,bQ)elseif bM<3600 and bM>60 then return string.format(\"%02dm:%02ds\",bP,bQ)else return string.format(\"%02ds\",bQ)end end;local bR=table.unpack;function fuelUsed(bS)local t={}function sum(q,...)if q then return q-sum(...)else return 0 end end;function average(b)if#t==bS then table.remove(t,1)end;if b~=0 and b~=nil then t[#t+1]=b end;return sum(bR(t))end;return average end;function getFuelSituation()local bT={atmo={},space={},rocket={}}for a3,bU in pairs(fuelTanks)do table.insert(bT[bU.type],{name=core.getElementNameById(a3),level=getFuelTankLevel(a3),time=getFuelTime(a3),specs=bU})end;return bT end;function getFuelTankSpecs(bV,bW)local bX=math.floor(core.getElementMaxHitPointsById(bW))return fuelTankSpecsByMaxHP[bV]['_'..normalizeHp(bV,bX)]end;function getFuelTankLiters(bW)local bY=fuelTanks[bW]local bZ=core.getElementMassById(bW)local b_=bZ-bY.baseWeight;return b_ end;function getFuelTankLevel(bW)local bY=fuelTanks[bW]local bH=bY.maxWeight()return getFuelTankLiters(bW)/bH end;function getFuelTime(bW)local bY=fuelTanks[bW]local c0=FuelTime[bW]or system.getArkTime()local c1=math.max(system.getArkTime()-c0,0.001)local bZ=core.getElementMassById(bW)local c2=bY.baseWeight;local fuelUsed=FuelMass[bW](bZ)local c3=c1/fuelUsed*(bZ-c2)local c4=disp_time(c3)FuelTime[bW]=system.getArkTime()return c4 end;function getFuelTanks()local c5=core.getElementIdList()for A,c6 in pairs(c5)do local c7=core.getElementDisplayNameById(c6)if c7==\"Atmospheric Fuel Tank\"then local c8=getFuelTankSpecs(\"atmo\",c6)fuelTanks[c6]=c8;FuelMass[c6]=fuelUsed(2)elseif c7==\"Space Fuel Tank\"then fuelTanks[c6]=getFuelTankSpecs(\"space\",c6)FuelMass[c6]=fuelUsed(2)elseif c7==\"Rocket Fuel Tank\"then fuelTanks[c6]=getFuelTankSpecs(\"rocket\",c6)FuelMass[c6]=fuelUsed(2)end end end;getFuelTanks()function TagManager(q)self={}local r={}local aS=\"\"local function aT(aU,aV)if aU==''then return false end;local aN,aW=0,{}for z,aX in function()return string.find(aV,aU,aN,true)end do table.insert(aW,string.sub(aV,aN,z-1))aN=aX+1 end;table.insert(aW,string.sub(aV,aN))return aW end;function self.tagsToString()if#r==0 then aS=\"all\"else aS=table.concat(r,\",\")end end;function self.Remove(A)if type(A)~=\"string\"then error(\"[TagManager] Unable to remove a tag - Not a string\")end;for aY,j in pairs(r)do if A==j then table.remove(r,aY)end end;self.tagsToString()end;function self.Add(A)if type(A)~=\"string\"then error(\"[TagManager] Unable to add a tag - Not a string\")end;for aY,j in pairs(r)do if A==j then return end end;table.insert(r,A)self.tagsToString()end;if q~=nil and type(q)==\"string\"then for aY,j in pairs(aT(\",\",q))do self.Add(j)end else self.Add(\"all\")end;setmetatable(self,{__tostring=function(self)return aS end})return self end;function Keybind(q)local self={}self.Key=q;local r={}function self.Add(aS,aT)if type(aS)~=\"function\"then error(\"[Keybind] Unable to add callback - not a function\")end;table.insert(r,{Function=aS,Name=aT})end;function self.Remove(aS)if type(aS)~=\"function\"then error(\"[Keybind] Unable to remove callback - not a function\")end;local aU={}for aV,aN in pairs(r)do aU[aN.Function]=aV end;for aV,aN in pairs(aU)do if aV==aS then r[aN]=nil end end end;function self.GetNames()local aW={}for aV,aN in pairs(r)do if aN.Name then table.insert(aW,aN.Name)end end;return aW end;function self.Call()for aV,aN in pairs(r)do aN.Function(self.Key)end end;return self end;function KeybindController()local self={}local z={\"forward\",\"backward\",\"left\",\"right\",\"yawleft\",\"yawright\",\"up\",\"down\",\"gear\",\"light\",\"landing\",\"brake\",\"option1\",\"option2\",\"option3\",\"option4\",\"option5\",\"option6\",\"option7\",\"option8\",\"option9\",\"stopengines\",\"speedup\",\"speeddown\",\"antigravity\",\"booster\",\"lshift\",\"lalt\",\"lalt\",\"strafeleft\",\"straferight\"}self.keyUp={}self.keyDown={}self.keyLoop={}function self.Call(aX,type)if type==\"up\"then if self.keyUp[aX]then self.keyUp[aX].Call(aX)end elseif type==\"down\"then if self.keyDown[aX]then self.keyDown[aX].Call(aX)end else if self.keyLoop[aX]then self.keyDown[aX].Call(aX)end;system.print(aX)end end;function self.GetNamedKeybinds()local aW={}for aV,aN in pairs(self.keyUp)do local A=aN.GetNames()if#A>0 then for aY=1,#A do table.insert(aW,{Key=aN.Key,Name=A[aY]})end end end;for aV,aN in pairs(self.keyDown)do local A=aN.GetNames()if#A>0 then for aY=1,#A do table.insert(aW,{Key=aN.Key,Name=A[aY]})end end end;for aV,aN in pairs(self.keyLoop)do local A=aN.GetNames()if#A>0 then for aY=1,#A do table.insert(aW,{Key=aN.Key,Name=A[aY]})end end end;table.sort(aW,function(j,b)return j.Key<b.Key end)return aW end;self.Init=function()end;local function aZ()for aY=1,#z do self.keyUp[z[aY]]=Keybind(z[aY])self.keyDown[z[aY]]=Keybind(z[aY])self.keyLoop[z[aY]]=Keybind(z[aY])end end;aZ()return self end;keybindPresets={}IOScheduler=function()local self={}self.defaultData=nil;self.currentTask=nil;self.taskQueue={}function self.queueData(c9)table.insert(self.taskQueue,c9)end;function self.send(bA)output=screen.getScriptOutput()screen.clearScriptOutput()if output~=\"ack\"then if output and output~=\"\"then handleOutput.Read(output)end;coroutine.yield()self.send(bA)else screen.setScriptInput(serialize(bA))end end;function self.runQueue()if#self.taskQueue==0 then if self.defaultData~=nil then self.currentTask=coroutine.create(function()self.send(self.defaultData)end)coroutine.resume(self.currentTask)end else self.currentTask=coroutine.create(function()for z=1,#self.taskQueue do local c9=self.taskQueue[z]if type(c9)==\"table\"then self.send(c9)end;table.remove(self.taskQueue,z)end end)coroutine.resume(self.currentTask)end end;function self.update()if not screen then system.print(\"No screen found\")return end;if self.currentTask then if coroutine.status(self.currentTask)~=\"dead\"then coroutine.resume(self.currentTask)else self.runQueue()end else self.runQueue()end end;return self end()HandleOutput=function()local self={}function self.Read(output)system.print(\"handleOutput.Read(): \"..output)if type(output)~=\"string\"or output==\"\"then return end;local f=deserialize(output)if f.dataType==\"config\"then config=f;local ca=tonumber(config.delta)if ca~=nil then config.targetAlt=ship.altitude+ca;stats.data.target=config.targetAlt else stats.data.target=config.targetAlt end;self.Execute()elseif f.updateReq then ioScheduler.queueData(config)else system.print(tostring(f))end end;function self.Execute()ship.baseAltitude=helios:closestBody(ship.customTarget):getAltitude(ship.customTarget)ship.altitudeHold=config.targetAlt;if config.estop then config.delta=nil;config.targetAlt=0;ship.altitudeHold=0;ship.verticalLock=false;ship.elevatorActive=false;ship.brake=true;ship.stateMessage=\"EMERGENCY STOP\"system.print(ship.stateMessage)ioScheduler.queueData(config)else ship.brake=false end;if ship.altitudeHold and ship.altitudeHold~=0 then ship.elevatorActive=true;system.print(\"Alt diff: \"..config.targetAlt-ship.baseAltitude)ship.targetDestination=moveWaypointZ(ship.customTarget,config.targetAlt-ship.baseAltitude)end;if config.setBaseReq then setBase()config.setBaseReq=false;ioScheduler.queueData(config)end;config.elevation=ship.altitude;manualControlSwitch()end;return self end()ioScheduler=IOScheduler;handleOutput=HandleOutput;local a1=require('atlas')planetaryReference=PlanetRef()galaxyReference=planetaryReference(a1)helios=galaxyReference[0]kinematics=Kinematics()local cb=json.decode;local cc=cb(unit.getWidgetData()).maxBrake;function STEC(core,cd,ce)local self={}self.core=core;self.construct=construct;self.control=cd;self.nearestPlanet=helios:closestBody(construct.getWorldPosition())self.world={up=vec3(construct.getWorldOrientationUp()),down=-vec3(construct.getWorldOrientationUp()),left=-vec3(construct.getWorldOrientationRight()),right=vec3(construct.getWorldOrientationRight()),forward=vec3(construct.getWorldOrientationForward()),back=-vec3(construct.getWorldOrientationForward()),velocity=vec3(construct.getWorldVelocity()),acceleration=vec3(construct.getWorldAcceleration()),position=vec3(construct.getWorldPosition()),gravity=vec3(core.getWorldGravity()),vertical=vec3(core.getWorldVertical()),atmosphericDensity=cd.getAtmosphereDensity(),nearPlanet=unit.getClosestPlanetInfluence()>0,atlasAltitude=self.nearestPlanet:getAltitude(construct.getWorldPosition())}self.target={prograde=function()return self.world.velocity:normalize()end,retrograde=function()return-self.world.velocity:normalize()end,radial=function()return self.world.gravity:normalize()end,antiradial=function()return-self.world.gravity:normalize()end,normal=function()return self.world.velocity:normalize():cross(self.world.gravity:normalize()):normalize()end,antinormal=function()return self.world.velocity:normalize():cross(-self.world.gravity:normalize()):normalize()end}self.rot=vec3(0,0,0)self.deviationRot=vec3(0,0,0)self.id=construct.getId()self.controlMode=unit.getControlMode()self.alternateCM=false;self.tags=TagManager(\"all,brake\")self.targetDestination=nil;self.targetdestination=nil;self.customTarget=vec3(0,0,0)self.baseAltitude=0;self.verticalLock=false;self.lockVector=vec3(0,0,0)self.lockPos=vec3(0,0,0)self.altHoldPreset1=0;self.altHoldPreset2=0;self.altHoldPreset3=0;self.altHoldPreset4=0;self.deviation=0;self.deviationVec=vec3(0,0,0)self.stateMessage=\"\"self.pocket=false;self.autoShutdown=false;self.dockingClamps=false;self.elevatorDestination=vec3(0,0,0)self.IDIntensity=5;self.deviationThreshold=0.05;self.playerId=player.getId()self.targetVectorVertical=nil;self.breadCrumbDist=1000;self.deviated=false;self.breadCrumbs={}self.hoverHeight=10;self.targetVectorAutoUnlock=true;self.altitude=0;self.mass=self.construct.getMass()self.thrust=vec3(0,0,0)self.direction=vec3(0,0,0)self.rotation=vec3(0,0,0)self.rotationSpeed=2;self.rotationSpeedzMin=0.01;self.rotationSpeedz=0.01;self.maxRotationSpeedz=3;self.rotationStep=0.03;self.brakingFactor=10;self.angularThrust=vec3(0,0,0)self.inertialDampening=false;self.inertialDampeningDesired=false;self.brake=false;self.counterGravity=true;self.followGravity=false;self.gravityFollowSpeed=6;self.speedLimiter=2000;self.variableSpeedLimit=2000;self.speedLimiterToggle=true;self.verticalSpeedLimitAtmo=750;self.verticalSpeedLimitSpace=2000;self.approachSpeed=200;self.throttle=1;self.fMax=0;self.vMax=0;self.hMax=0;self.elevatorActive=false;self.altitudeHold=0;self.atmosphereThreshold=0;self.cruiseSpeed=0;self.ignoreVerticalThrottle=false;self.localVelocity=vec3(construct.getVelocity())self.brakeDistance=0;self.accelTime=nil;self.rollDegrees=self.world.vertical:angle_between(self.world.left)/math.pi*180-90;self.viewY=0;self.viewX=0;if self.world.vertical:dot(self.world.up)>0 then self.rollDegrees=180-self.rollDegrees end;self.pitchRatio=self.world.vertical:angle_between(self.world.forward)/math.pi-0.5;self.verticalCruise=false;self.verticalCruiseSpeed=0;self.priorityTags1=\"brake,airfoil,torque,vertical,lateral,longitudinal\"self.priorityTags2=\"atmospheric_engine,space_engine\"self.priorityTags3=\"\"local c0=system.getArkTime()function self.updateWorld()self.world={up=vec3(construct.getWorldOrientationUp()),down=-vec3(construct.getWorldOrientationUp()),left=-vec3(construct.getWorldOrientationRight()),right=vec3(construct.getWorldOrientationRight()),forward=vec3(construct.getWorldOrientationForward()),back=-vec3(construct.getWorldOrientationForward()),velocity=vec3(construct.getWorldVelocity()),acceleration=vec3(construct.getWorldAcceleration()),position=vec3(construct.getWorldPosition()),gravity=vec3(core.getWorldGravity()),vertical=vec3(core.getWorldVertical()),atmosphericDensity=cd.getAtmosphereDensity(),nearPlanet=unit.getClosestPlanetInfluence()>0,atlasAltitude=self.nearestPlanet:getAltitude(construct.getWorldPosition())}self.nearestPlanet=helios:closestBody(construct.getWorldPosition())self.rollDegrees=self.world.vertical:angle_between(self.world.left)/math.pi*180-90;if self.world.vertical:dot(self.world.up)>0 then self.rollDegrees=180-self.rollDegrees end;self.pitchRatio=self.world.vertical:angle_between(self.world.forward)/math.pi-0.5;self.AngularVelocity=vec3(construct.getWorldAngularVelocity())self.AngularAcceleration=vec3(construct.getWorldAngularAcceleration())self.AngularAirFriction=vec3(construct.getMaxThrustAlongAxis())self.airFriction=vec3(construct.getWorldAirFrictionAcceleration())local cf=helios:closestBody(construct.getWorldPosition()).atmosphereRadius;local cg=helios:closestBody(construct.getWorldPosition()).radius;self.atmosphereThreshold=cf-cg;self.airFriction=vec3(construct.getWorldAirFrictionAcceleration())self.mass=self.construct.getMass()self.altitude=helios:closestBody(construct.getWorldPosition()):getAltitude(construct.getWorldPosition())self.localVelocity=vec3(construct.getVelocity())self.maxBrake=cb(unit.getWidgetData()).maxBrake;local ch=construct.getMaxThrustAlongAxis(\"all\",{vec3(0,1,0):unpack()})local ci=construct.getMaxThrustAlongAxis(\"all\",{vec3(0,0,1):unpack()})if self.world.atmosphericDensity>0.1 then self.fMax=math.max(ch[1],-ch[2])else self.fMax=math.max(ch[3],-ch[4])end;if self.world.atmosphericDensity>0.1 then self.vMax=math.max(ci[1],-ci[2])else self.vMax=math.min(ci[3],-ci[4])end;local cj=construct.getMaxThrustAlongAxis(\"all\",{vec3(1,0,0):unpack()})if self.world.atmosphericDensity>0.1 then self.hMax=math.max(cj[1],-cj[2])else self.hMax=math.max(cj[3],-cj[4])end;local ck=self.mass*core.getGravityIntensity()local cl=self.vMax;local cm=self.maxBrake;local cn=1;if self.maxBrake~=nil and core.getGravityIntensity()>=1 then if self.world.velocity:dot(-self.world.gravity:normalize())<1 then cn=-1 end;ck=ck*cn;cl=self.vMax+ck;cm=self.maxBrake+ck end;self.brakeDistance,self.accelTime=kinematics.computeDistanceAndTime(self.world.velocity:len(),0,self.mass,cl,20,cm)end;function self.calculateAccelerationForce(co,bM)return self.mass*co/bM end;function clamp(b,cp,cq)return math.min(cq,math.max(b,cp))end;function round(n,bo)local cr=10^(bo or 0)return math.floor(n*cr+0.5)/cr end;function self.throttleUp()self.throttle=clamp(self.throttle+0.05,0,1)end;function self.throttleDown()self.throttle=clamp(self.throttle-0.05,0,1)end;function moveWaypointZ(cs,U)return cs-ship.nearestPlanet:getGravity(cs):normalize()*U end;function self.worldToLocal(cs)return vec3(library.systemResolution3({self.world.right:unpack()},{self.world.forward:unpack()},{self.world.up:unpack()},{cs:unpack()}))end;function self.localToRelative(ct,cu,cv,cw)local cx,cy,cz=cv:unpack()local forwardX,cA,cB=cw:unpack()local cC,cD,cE=cu:unpack()local cF,cG,cH=ct:unpack()local cI=cF*cx+cG*forwardX+cH*cC;local cJ=cF*cy+cG*cA+cH*cD;local cK=cF*cz+cG*cB+cH*cE;return vec3(cI,cJ,cK)end;function MsToKmh(cL)return cL*3.6 end;function KmhToMs(cM)return cM/3.6 end;function self.apply()local c1=math.max(system.getArkTime()-c0,0.001)self.updateWorld()local cN=self.thrust;local cO=self.angularThrust;local ch=construct.getMaxThrustAlongAxis(\"all\",{vec3(0,1,0):unpack()})if not self.elevatorActive then self.inertialDampening=self.inertialDampeningDesired end;if self.direction.x~=0 then local ay=(1-self.world.up:dot(-self.world.gravity:normalize()))*self.mass*0.000095;local cP=-self.world.vertical*ay;if self.direction.x<0 and math.abs(round2(self.hMax,0))<500 then cN=cN+self.world.right*self.direction.x+cP:normalize()*self.fMax*self.throttle elseif self.direction.x>0 and math.abs(round2(self.hMax,0))<500 then cN=cN+self.world.right*self.direction.x+cP:normalize()*self.fMax*self.throttle else cN=cN+self.world.right*self.direction.x*self.fMax*self.throttle end end;if self.direction.y~=0 then local ay=(1-self.world.up:dot(-self.world.gravity:normalize()))*self.mass*0.000095;local cP=-self.world.vertical*ay;if self.direction.y<0 and math.abs(round2(ch[2],0))==0 then cN=cN+self.world.forward*self.direction.y+cP:normalize()*self.fMax*self.throttle else cN=cN+self.world.forward*self.direction.y*self.fMax*self.throttle end end;if self.direction.z~=0 then local q=self.world.up*self.direction.z*self.fMax;if not self.ignoreVerticalThrottle then q=q*self.throttle end;cN=cN+q end;if self.rotation.x~=0 then cO=cO+self.world.forward:cross(self.world.up)*self.rotation.x*self.rotationSpeed;if self.targetVectorAutoUnlock then self.targetVector=nil end end;if self.rotation.y~=0 then cO=cO+self.world.up:cross(self.world.right)*self.rotation.y*self.rotationSpeed end;if self.rotation.z~=0 then if self.rotationSpeedz<=self.maxRotationSpeedz then self.rotationSpeedz=self.rotationSpeedz+self.rotationStep end;cO=cO+self.world.forward:cross(self.world.right)*self.rotation.z*clamp(self.rotationSpeedz,0.01,self.maxRotationSpeedz)if self.targetVectorAutoUnlock then self.targetVector=nil end end;if self.followGravity and self.rotation.x==0 then local cQ=self.localVelocity:len()*self.mass;local cR=1;local cS=self.world.up:cross(-self.nearestPlanet:getGravity(construct.getWorldPosition()))if self.pocket then if self.direction.x<0 then cR=0.25;cS=cS+ship.world.right:cross(-self.nearestPlanet:getGravity(construct.getWorldPosition())*0.25)elseif self.direction.x>0 then cR=0.25;cS=cS-ship.world.right:cross(-self.nearestPlanet:getGravity(construct.getWorldPosition())*0.25)elseif self.direction.y<0 then cS=cS+ship.world.forward:cross(-self.nearestPlanet:getGravity(construct.getWorldPosition())*0.25)end end;cS=cS*cR;cO=cO+cS end;self.deviationVec=moveWaypointZ(self.customTarget,self.altitude-self.baseAltitude)-self.world.position;self.deviationRot=self.world.forward:cross(self.rot)self.deviation=self.deviationVec:len()if self.elevatorActive then if not self.inertialDampening then self.inertialDampening=true end;if not self.counterGravity then self.counterGravity=true end;self.targetVector=self.rot;if self.world.velocity:len()>2000/3.6 then deviation=0 end;local cT=self.altitudeHold-self.altitude;local cU=1000;local cV=0;local aj=self.world.position-self.targetDestination:len()local cW=helios:closestBody(self.targetDestination):getAltitude(self.targetDestination)-self.altitude;local cX=vec3(0,0,0)local cY;local cZ=1;if self.altitude<=self.atmosphereThreshold+self.brakeDistance or self.altitude<=self.brakeDistance then cY=self.verticalSpeedLimitAtmo else cY=self.verticalSpeedLimitSpace end;if self.brakeDistance+cU>=math.abs(cT)then cY=self.approachSpeed end;local deviationThreshold=self.deviationThreshold;if self.deviated or self.world.velocity:len()<1 then deviationThreshold=0.05 end;if self.deviation>deviationThreshold+self.world.velocity:len()*10^-2 then cX=moveWaypointZ(self.customTarget,self.altitude-self.baseAltitude)self.deviated=true;cV=self.deviation*self.IDIntensity;self.stateMessage=\"Correcting Deviation\"else self.deviated=false;cX=self.targetDestination end;if math.abs(cT)>self.brakeDistance and math.abs(cT)>500 and not self.deviated then self.stateMessage=\"Traveling\"cV=round2(clamp(cT,-cY,cY),1)elseif not self.deviated then self.stateMessage=\"Final approach\"cV=self.approachSpeed;if self.brakeDistance*1.5>=math.abs(aj)then cV=5 end end;local c_;if cW>self.breadCrumbDist and not self.deviated then c_=moveWaypointZ(self.customTarget,self.altitude-self.baseAltitude+self.breadCrumbDist)cX=c_ elseif cW<-self.breadCrumbDist and not self.deviated then c_=moveWaypointZ(self.customTarget,self.altitude-self.baseAltitude-self.breadCrumbDist)cX=c_ end;self.elevatorDestination=self.world.position-cX:normalize()cN=cN-self.elevatorDestination*self.mass*utils.clamp(aj*3.6,0.3,math.abs(cV)/3.6*self.IDIntensity)if aj<0.01 and not manualControl then self.elevatorActive=false;self.targetVector=nil;self.stateMessage=\"Idle\"self.dockingClamps=true elseif aj<2 and self.world.velocity:len()==0 and not manualControl then self.elevatorActive=false;self.targetVector=nil;self.stateMessage=\"Idle\"self.dockingClamps=true else self.dockingClamps=false end else self.destination=vec3(0,0,0)end;if self.inertialDampening then local d0=self.localVelocity;local ca=vec3(0,0,0)local d1=self.direction or vec3(0,0,0)if d1.x==0 then ca.x=d0.x end;if d1.y==0 then ca.y=d0.y end;if d1.z==0 then ca.z=d0.z end;ca=self.localToRelative(ca,self.world.up,self.world.right,self.world.forward)cN=cN-ca*self.mass*self.IDIntensity end;if self.brake then local d2=self.world.velocity:len()cN=-self.world.velocity*self.mass*math.max(self.brakingFactor*math.max(1,d2*0.5),d2*d2)end;if self.targetVector~=nil then local d3=vec3(self.world.forward.x,self.world.forward.y,self.world.forward.z)if type(self.targetVector)==\"function\"then d3=self.targetVector()elseif type(self.targetVector)==\"table\"then d3=self.targetVector end;cO=cO+self.world.forward:cross(d3)*self.rotationSpeed/4-(self.AngularVelocity*2-self.AngularAirFriction*2)end;if self.targetVectorVertical~=nil then local d3=vec3(self.world.up.x,self.world.up.y,self.world.up.z)if type(self.targetVector)==\"function\"then d3=self.targetVector()elseif type(self.targetVector)==\"table\"then d3=self.targetVector end;if self.world.up-self.targetVectorVertical:len()<0 then cO=cO+-self.world.up:cross(d3)*self.rotationSpeed/4-(self.AngularVelocity*2-self.AngularAirFriction*2)else cO=cO+self.world.up:cross(d3)*self.rotationSpeed/4-(self.AngularVelocity*2-self.AngularAirFriction*2)end end;if self.counterGravity then cN=cN-self.world.gravity*self.mass end;if self.verticalLock then local d4=self.world.position+self.world.up-self.lockPos;local d5=self.lockVector*self.lockVector:dot(d4)local d6=d5-d4;local d7=d6*self.mass*0.3;cN=cN+d7*self.mass end;cO=cO-(self.AngularVelocity*2-self.AngularAirFriction*2)cN=cN/self.mass;if self.controlMode~=unit.getControlMode()then self.controlMode=unit.getControlMode()if unit.getControlMode()==0 then self.alternateCM=false end;if unit.getControlMode()==1 then self.alternateCM=true end end;self.control.setEngineCommand(\"atmospheric_engine,space_engine,airfoil,brake,torque,vertical,lateral,longitudinal\",{cN:unpack()},{cO:unpack()},false,false,self.priorityTags1,self.priorityTags2,self.priorityTags3)cO=vec3(0,0,0)cN=vec3(0,0,0)self.elevatorDestination=vec3(0,0,0)c0=system.getArkTime()end;return self end;ship=STEC(core,unit)json=require('dkjson')quat=require('cpml/quat')vec3=require('cpml/vec3')const=require('cpml/constants')vec2=require('cpml/vec2')utils=require('cpml/utils')mat4=require(\"cpml/mat4\")mouseDeltaSum=vec2(0,0)local function q(r)if r>0 then return 1 elseif r<0 then return-1 else return 0 end end;function scaleViewBoundsY(aS)local aT=0;local aU=1250/mouseSensitivity;local aV=-(system.getScreenHeight()/2)local aN=system.getScreenHeight()/2;return(aS-aT)/(aU-aT)*(aN-aV)+aV end;function scaleViewBoundsX(aW)local aT=1;local aU=-1;if q(forwardX.x)==-1 and q(forwardX.y)==-1 then aT=-1;aU=1 elseif q(forwardX.x)==1 and q(forwardX.y)==-1 then aT=-1;aU=1 end;local aV=-(system.getScreenHeight()/2)local aN=system.getScreenHeight()/2;return(aW-aT)/(aU-aT)*(aN-aV)+aV end;function scaleViewBound(aT,aU,aV,aN,z)return(z-aT)/(aU-aT)*(aN-aV)+aV end;function deltaSum(aX,A)local aY=0;local j=0;if aX.y+A.y<=0 then j=0 elseif aX.y+A.y>=1250/mouseSensitivity then j=1250/mouseSensitivity else j=aX.y+A.y end;return vec2(aY,j)end;function updateAR()local b=vec2(system.getMouseDeltaX(),system.getMouseDeltaY())mouseDeltaSum=deltaSum(mouseDeltaSum,b)playerQ=1;forwardX=playerQ*vec3(core.getConstructOrientationForward())ship.viewY=scaleViewBoundsY(mouseDeltaSum.y)ship.viewX=scaleViewBoundsX(forwardX.x)end;vec2=require('cpml/vec2')mat4=require(\"cpml/mat4\")local json=require(\"dkjson\")local d8=string.format;if next(manualSwitches)~=nil then for F,d9 in ipairs(manualSwitches)do system.print(\"Deactivate!\")d9.deactivate()end end;function SpeedConvert(B)if not B or B==0 then return{0,\"00\",\"km/h\"}end;if B>5000 then local da=tonumber(tostring(round2(B/55.55,2)):match(\"%.(%d+)\"))da=string.format(\"%02d\",da)return{round2(B/55.55),da,\"su/h\"}end;local da=tonumber(tostring(round2(B/3.6,2)):match(\"%.(%d+)\"))da=string.format(\"%02d\",da)return{round2(B*3.6),da,\"km/h\"}end;function CruiseControl(B)local db=0;if ship.cruiseSpeed<500 then db=B*10 elseif ship.cruiseSpeed>=500 and ship.cruiseSpeed<=1999 then db=B*50 elseif ship.cruiseSpeed>=2000 and ship.cruiseSpeed<=9999 then db=B*100 elseif ship.cruiseSpeed>=10000 then db=B*1000 end;ship.cruiseSpeed=utils.clamp(ship.cruiseSpeed+db,-29990,29990)end;function getControlMode()if ship.alternateCM then return\"Cruise\"else return\"Travel\"end end;altHoldAdjustment=0.1;altAdjustment=3;function altHoldAdjustmentSetting()return altHoldAdjustment*10^altAdjustment end;function setAltHoldAdjustment()end;function SHUDMenuItem(dc,dd,de)local self={}self.Enabled=true;self.Active=false;self.Content=dc;self.Class=\"\"self.Action=dd or function(system,unit,self)end;self.Update=de or function(system,unit,self)end;function self.Disable()self.Enabled=false;return self end;function self.Enable()self.True=false;return self end;function self.Lock()SHUD.ScrollLock=true;self.Active=true;self.Class=\"locked\"return self end;function self.Unlock()SHUD.ScrollLock=false;self.Active=false;self.Class=\"\"return self end;return self end;SHUD=function()local self={}self.Enabled=false;self.FreezeUpdate=false;self.IntroPassed=false;self.FOV=system.getCameraHorizontalFov()self.ScreenW=system.getScreenWidth()self.ScreenH=system.getScreenHeight()self.Resolution=vec2(self.ScreenW,self.ScreenH)self.SvgMinX=-round(self.ScreenW/4/2,0)self.SvgMinY=-round(self.ScreenH/4/2,0)self.SvgWidth=round(self.ScreenW/4,0)self.SvgHeight=round(self.ScreenH/4,0)function scaleViewBounds(df)local dg=-0.5;local dh=0.5;local di=-90;local dj=90;return-((df-dg)/(dh-dg)*(dj-di)+di)end;shipPitch=scaleViewBounds(ship.pitchRatio)self.SHUDFuelHtml=\"\"self.Markers={}self.MarkerBuffer={}function self.worldToScreen(ct)local bw=mat4():perspective(self.FOV,self.ScreenW/self.ScreenH,0.1,100000)local dk=ship.world.position-vec3(unit.getMasterPlayerRelativePosition())local dl=mat4():look_at(dk,dk+ship.world.forward,ship.world.up)local ct=dl*bw*{ct.x,ct.y,ct.z,1}ct[1]=ct[1]/ct[4]*0.5+0.5;ct[2]=ct[2]/ct[4]*0.5+0.5;ct[1]=ct[1]*100;ct[2]=ct[2]*100;return vec3(ct[1],ct[2],ct[3])end;local dm=SHUDMenuItem;local dn=DynamicDocument;function self.UpdateMarkers()self.MarkerBuffer={}for z=1,#self.Markers do local j=self.Markers[z]local dp={}local P=vec3(0,0,0)if type(j.Position)==\"function\"then dp.pos=j.Position()P=j.Position()else dp.pos=j.Position;P=j.Position end;dp.pos=self.worldToScreen(dp.pos)dp.class=j.Class;dp.content='&nbsp;'if j.Name then dp.content=[[<div class=\"name\">]]..j.Name..[[</div>]]end;if j.ShowDistance then dp.content=dp.content..[[<div class=\"distance\">]]..round2(ship.world.position-P:len())..[[m</div>]]end;if dp.pos.z>0 then self.MarkerBuffer[#self.MarkerBuffer+1]=dp end end end;local function dq(b3)return b3:gsub(\"%%\",\"%%%%\")end;function self.MakeBooleanIndicator(dr)local ds=[[<span class=\"right\">\n            <i dd-if=\"varName == true\">✓&nbsp;</i>\n            <i dd-if=\"varName == false\">✘&nbsp;</i>\n        </span>]]return ds:gsub(\"varName\",dq(dr))end;function self.MakeSliderIndicator(dr,dt)dt=dt or\"\"local ds=[[<span class=\"right\">{{varName}}{{suffix}}<i>&udarr;&nbsp;</i></span>]]return ds:gsub(\"varName\",dq(dr)):gsub(\"{{suffix}}\",dq(dt))end;function self.GenerateMenuLink(du,dv)return dm(du..self.MenuIcon,function()self.SelectMenu(dv)end)end;self.MenuIcon=[[<span class=\"right\"><i>&gt;&nbsp;</i></span>]]self.BackButton=dm([[<i>&lt;&nbsp;</i>&nbsp;]]..\"Back\",function()SHUD.Menu=SHUD.MenuList.prev;SHUD.CurrentIndex=1 end)self.Menu={dm(dn([[<span>Throttle<span>]]..self.MakeSliderIndicator(\"round2(ship.throttle * 100)\",\"%\")),function(F,F,b2)if b2.Active then b2.Unlock()else b2.Lock()end end,function(system,F,b2)ship.throttle=utils.clamp(ship.throttle+system.getMouseWheel()*0.05,-1,1)end),self.GenerateMenuLink(\"Stability Assist\",\"stability\"),self.GenerateMenuLink(\"Altitude Hold\",\"altHold\"),self.GenerateMenuLink(\"Ship Stats\",\"shipStats\"),dm([[<i>&#9432;&nbsp;</i><span>&nbsp;Hotkeys</span>]]..self.MenuIcon,function()self.SelectMenu(\"hotkeys\")end)}self.MenuList={}self.MenuList.flightMode={}self.MenuList.shipStats={dm(dn([[<span>Core ID:</span><span class=\"right\">{{ship.id}}</span>]])).Disable(),dm(dn([[<span>Mass:</span><span class=\"right\">{{round2(ship.mass/1000,2)}} Ton</span>]])).Disable(),dm(dn([[<span>FMax:</span><span class=\"right\">{{round2(ship.fMax/1000,2)}} KN</span>]])).Disable(),dm(dn([[<span>Pos X:</span><span class=\"right\">{{round2(ship.world.position.x)}}</span>]])).Disable(),dm(dn([[<span>Pos Y:</span><span class=\"right\">{{round2(ship.world.position.y)}}</span>]])).Disable(),dm(dn([[<span>Pos Z:</span><span class=\"right\">{{round2(ship.world.position.z)}}</span>]])).Disable()}self.MenuList.stability={dm(dn(\"<span>Gravity Suppression<span>\"..self.MakeBooleanIndicator(\"ship.counterGravity\")),function()ship.counterGravity=not ship.counterGravity end),dm(dn(\"<span>Gravity Follow</span>\"..self.MakeBooleanIndicator(\"ship.followGravity\")),function()ship.followGravity=not ship.followGravity end),dm(dn(\"<span>Inertial Dampening<span>\"..self.MakeBooleanIndicator(\"ship.inertialDampening\")),function()ship.inertialDampeningDesired=not ship.inertialDampeningDesired end),dm(dn([[<span>Hover Height<span>]]..self.MakeSliderIndicator(\"ship.hoverHeight\",\"m\")),function(F,F,b2)if b2.Active then b2.Unlock()else b2.Lock()end end,function(system,F,b2)ship.hoverHeight=utils.clamp(ship.hoverHeight+system.getMouseWheel(),0,35)end)}function self.updateTargetDest()ship.targetDestination=moveWaypointZ(ship.customTarget,utils.clamp(ship.altitudeHold+system.getMouseWheel()*altHoldAdjustmentSetting(),0,2000000)-ship.baseAltitude)ship.altitudeHold=utils.clamp(ship.altitudeHold+system.getMouseWheel()*altHoldAdjustmentSetting(),0,2000000)end;self.MenuList.altHold={dm(dn(\"<span>Altitude Hold<span>\"..self.MakeBooleanIndicator(\"ship.elevatorActive\")),function()ship.elevatorActive=not ship.elevatorActive end),dm(dn([[<span>Multiplier<span>]]..self.MakeSliderIndicator(\"round2(altHoldAdjustmentSetting(),3)\",\"\")),function(F,F,b2)if b2.Active then b2.Unlock()else b2.Lock()end end,function(system,F,b2)altAdjustment=utils.clamp(altAdjustment+system.getMouseWheel(),-1,4)end),dm(dn([[<span>Alt Setpoint<span>]]..self.MakeSliderIndicator(\"round2(ship.altitudeHold,3)\",\"m\")),function(F,F,b2)if b2.Active then b2.Unlock()else b2.Lock()end end,function(system,F,b2)self.updateTargetDest()end),dm(dn([[<span>Preset 1:</span><span class=\"right\">]]..mToKm(ship.altHoldPreset1)..\"</span>\"),function()ship.altitudeHold=ship.altHoldPreset1;ship.elevatorActive=true end),dm(dn([[<span>Preset 2:</span><span class=\"right\">]]..mToKm(ship.altHoldPreset2)..\"</span>\"),function()ship.altitudeHold=ship.altHoldPreset2;ship.elevatorActive=true end),dm(dn([[<span>Preset 3:</span><span class=\"right\">]]..mToKm(ship.altHoldPreset3)..\"</span>\"),function()ship.altitudeHold=ship.altHoldPreset3;ship.elevatorActive=true end),dm(dn([[<span>Preset 4:</span><span class=\"right\">]]..mToKm(ship.altHoldPreset4)..\"</span>\"),function()ship.altitudeHold=ship.altHoldPreset4;ship.elevatorActive=true end),dm(dn([[<span>Altitude:</span><span class=\"right\">{{round2(ship.altitude,4)}}</span>]])).Disable()}self.MenuList.hotkeys={}local dw=\"<style>\"..CSS_SHUD..\"</style>\"self.fuel=nil;function getFuelRenderedHtml()local dx=\"\"local dy=\"\"local dz=\"\"self.fuel=getFuelSituation()local dA=\"\"local dB=function(type,c8)local dC=100*c8.level;local dD=c8.level*c8.specs.capacity()return'<div class=\"fuel-meter fuel-type-'..type..'\"><hr class=\"fuel-level\" style=\"width:'..dC..'%%;\" />'..c8.time..' ('..math.floor(dC)..'%%, '..math.floor(dD)..'L)</div>'end;for F,c8 in pairs(self.fuel.atmo)do dA=dA..dB(\"atmo\",c8)end;for F,c8 in pairs(self.fuel.space)do dA=dA..dB(\"space\",c8)end;for F,c8 in pairs(self.fuel.rocket)do dA=dA..dB(\"rocket\",c8)end;self.SHUDFuelHtml=dA end;opacity=1.0;local dE=dn(dw..[[\n    <div id=\"horizon\" style=\"opacity: {{opacity}};\">\n        <svg dd-if=\"enableARReticle\" class=\"shadow\" height=\"100%\" width=\"100%\" viewBox=\"{{SHUD.SvgMinX}} {{SHUD.SvgMinY}} {{SHUD.SvgWidth}} {{SHUD.SvgHeight}}\">\n            <g transform=\"translate({{ship.viewX}},{{ -ship.viewY }}) scale(0.7)\">\n                <line class=\"st0\" x1=\"-0.5\" y1=\"-91.5\" x2=\"-0.5\" y2=\"-11.5\"/>\n                <line class=\"st0\" x1=\"116\" y1=\"-0.5\" x2=\"19\" y2=\"-0.5\"/>\n                <line class=\"st0\" x1=\"-0.5\" y1=\"10.25\" x2=\"-0.5\" y2=\"90.25\"/>\n                <line class=\"st0\" x1=\"-20\" y1=\"-0.5\" x2=\"-117\" y2=\"-0.5\"/>\n                <line class=\"st1\" x1=\"-0.5\" y1=\"-4\" x2=\"-0.5\" y2=\"3\"/>\n                <line class=\"st1\" x1=\"3\" y1=\"-0.5\" x2=\"-4\" y2=\"-0.5\"/>\n                <path class=\"st0\" d=\"M-10,16.34c-5.12-3.4-8.5-9.23-8.5-15.84c0-6.56,3.32-12.34,8.38-15.76\"/>\n                <path class=\"st0\" d=\"M10-15.96c5.68,3.29,9.5,9.43,9.5,16.46c0,7.03-3.82,13.17-9.5,16.46\"/>\n                <g transform=\"rotate({{ shipPitch }} 0,0)\">\n                    <path class=\"st0\" d=\"M-53.99-10.22c3.98-17.83,19.5-38.76,42.99-43.7\"/>\n                    <path class=\"st0\" d=\"M-11,51.99C-32.68,47.76-49.76,30.68-53.99,9\"/>\n                    <path class=\"st0\" d=\"M52.99,9C48.69,31.01,31.15,48.28,9,52.17\"/>\n                    <path class=\"st0\" d=\"M9-54.14c21.87,3.98,39.92,21.42,44.09,43.78\"/>\n                    <line class=\"st0\" x1=\"-53.5\" y1=\"-10.5\" x2=\"-94.5\" y2=\"-10.5\"/>\n                    <line class=\"st0\" x1=\"-54\" y1=\"9.5\" x2=\"-95\" y2=\"9.5\"/>\n                    <polyline class=\"st2\" points=\"53,9.5 84.49,9.5 94,9.5 84.5,13.5 84.5,9.5 \"/>\n                    <polyline class=\"st2\" points=\"53,-10.5 84.49,-10.5 94,-10.5 84.5,-14.5 84.5,-10.5 \"/>\n                </g dd-if=\"ship.world.nearPlanet\">\n            </g>\n\n\n        </svg>\n        <div id=\"speedometerBar\">&nbsp;</div>\n           <div id=\"speedometer\">\n               <span class=\"display\">\n               \t<span class=\"major\">{{SpeedConvert(ship.world.velocity:len())[1]}}</span>\n               \t<span class=\"minor\">{{SpeedConvert(ship.world.velocity:len())[2]}}</span>\n               \t<span class=\"unit\">{{SpeedConvert(ship.world.velocity:len())[3]}}</span>\n               </span>\n               <span class=\"accel\">\n               \t<span class=\"major\">{{round2(ship.world.acceleration:len(), 1)}}</span>\n               \t<span class=\"unit\">m/s</span>\n               </span>\n               <span class=\"vertical\">\n               \t{{round2(ship.world.velocity:dot(-ship.world.gravity:normalize()), 1)}}\n               </span>\n               <span class=\"alt\">\n               \t{{round2(ship.altitude)}}m\n               </span>\n\n               <span class=\"misc\">ATM {{round2(ship.world.atmosphericDensity, 2)}} | G {{round2(ship.world.gravity:len(), 2)}}m/s</span>\n               <span dd-if=\"not ship.alternateCM\" class=\"throttle\">Throttle {{round2(ship.throttle * 100)}}%</span>\n\t\t     <span dd-if=\"ship.alternateCM\" class=\"throttle\">Cruise {{round2(ship.cruiseSpeed)}} km/h</span>\n            </div>\n\n            <div id=\"horizon-menu\">\n                {{_SHUDBUFFER}}\n            </div>\n\n            </div>\n            <div id=\"fuelTanks\">\n            {{ SHUD.SHUDFuelHtml }}\n\n            </div>\n\n    </div>\n\n    ]])local dF=[[<div class=\"item {{class}}\">{{content}}</div>]]function self.SelectMenu(dG)if not SHUD.MenuList[dG]then error(\"[SHUD] Undefined menu: \"..dG)end;SHUD.MenuList.prev=SHUD.Menu;SHUD.Menu=SHUD.MenuList[dG]SHUD.CurrentIndex=1;if SHUD.Menu[#SHUD.Menu]~=SHUD.BackButton then table.insert(SHUD.Menu,SHUD.BackButton)end end;function self.Select()if not self.Enabled then return end;if#self.Menu<1 then return end;self.Menu[self.CurrentIndex].Action(self.system,self.unit,self.Menu[self.CurrentIndex])end;function self.Render()local dH=\"\"if self.Enabled then for z=1,#self.Menu do local dI=self.Menu[z]if dI.Active then dI.Update(self.system,self.unit,dI)end;local dJ=dF;local dK=\"\"local dc=dI.Content;if dc.Read then dc=dc.Read()end;dc=dq(dc)if self.CurrentIndex==z then dK=\"active\"end;if not dI.Enabled then dK=dK..\" disabled\"end;dJ=dJ:gsub(\"{{class}}\",dK..\" \"..dI.Class)dJ=dJ:gsub(\"{{content}}\",dc)dH=dH..dJ end;_ENV[\"_SHUDBUFFER\"]=dq(dH)else ship.frozen=player.isFrozen()_ENV[\"_SHUDBUFFER\"]=dn([[<div class=\"item helpText\">Press ]]..\"[\"..self.system.getActionKeyName(\"speedup\")..\"]\"..[[ to  toggle menu</div>\n\t\t\t\t<div class=\"item helpText\"><span>Character Movement:</span>]]..self.MakeBooleanIndicator(\"ship.frozen\")..[[</div>\n\t\t\t\t<div class=\"item helpText\"><span>Vertical Lock:</span>]]..self.MakeBooleanIndicator(\"ship.verticalLock\")..[[</div>\n\t\t\t\t<div class=\"item helpText\"><span>Inertial Dampening:</span>]]..self.MakeBooleanIndicator(\"ship.inertialDampening\")..[[</div>\n\t\t\t\t<div class=\"item helpText\"><span>Gravity Follow:</span>]]..self.MakeBooleanIndicator(\"ship.followGravity\")..[[</div>\n\t\t\t\t<div class=\"item helpText\"><span>Gravity Supression:</span>]]..self.MakeBooleanIndicator(\"ship.counterGravity\")..[[</div>\n            ]]).Read()end;if not self.FreezeUpdate then self.system.setScreen(dE.Read())end end;function self.Update()if useGEAS then unit.activateGroundEngineAltitudeStabilization(ship.hoverHeight)end;if player.isFrozen()or self.Enabled then opacity=1 else opacity=0.5 end;if not self.ScrollLock and self.Enabled then local dL=system.getMouseWheel()if dL~=0 then self.CurrentIndex=self.CurrentIndex-dL;if self.CurrentIndex>#self.Menu then self.CurrentIndex=1 elseif self.CurrentIndex<1 then self.CurrentIndex=#self.Menu end end elseif not self.Enabled then if player.isFrozen()and unit.isRemoteControlled()==1 then ship.throttle=utils.clamp(ship.throttle+system.getMouseWheel()*0.05,-1,1)end;self.UpdateMarkers()end end;function self.Init(system,unit,dM)self.system=system;self.unit=unit;self.CurrentIndex=1;self.ScrollLock=false;system.showScreen(1)unit.hideWidget()local E=dM.GetNamedKeybinds()self.MenuList.hotkeys={}for z=1,#E do local dN=E[z]table.insert(self.MenuList.hotkeys,dm([[<span>]]..dN.Name..[[</span><span class=\"right\">]]..self.system.getActionKeyName(dN.Key)..[[</span>]]).Disable())end;self.MenuList.flightMode={}for A,h in pairs(keybindPresets)do table.insert(self.MenuList.flightMode,dm(string.upper(A),function()self.Init(self.system,self.unit,h)keybindPreset=A;keybindPresets[keybindPreset].Init()end))end;dM.Init()end;return self end()ship.hoverHeight=tonumber(GEAS_Alt)or 10;ship.autoShutdown=autoShutdown;ship.altitudeHold=round2(ship.altitude,0)ship.inertialDampeningDesired=inertialDampening==true;ship.followGravity=followGravity==true;ship.minRotationSpeed=tonumber(minRotationSpeed)or 0.1;ship.maxRotationSpeedz=tonumber(maxRotationSpeed)or 0.5;ship.rotationStep=tonumber(rotationStep)or 0.01;ship.verticalSpeedLimitAtmo=tonumber(verticalSpeedLimitAtmo)or 1100;ship.verticalSpeedLimitSpace=tonumber(verticalSpeedLimitSpace)or 4000;ship.approachSpeed=tonumber(approachSpeed)or 100;ship.altHoldPreset1=tonumber(altHoldPreset1)or 132000;ship.altHoldPreset2=tonumber(altHoldPreset2)or 1000;ship.altHoldPreset3=tonumber(altHoldPreset3)or 50;ship.altHoldPreset4=tonumber(altHoldPreset4)or 2;ship.deviationThreshold=tonumber(deviationThreshold)or 0.5;ship.pocket=pocket==true;ship.breadCrumbDist=tonumber(breadCrumbDist)or 1000;local dO=false;if construct.setDockingMode(dockingMode)then system.print(\"[I] Docking mode successfully set: \"..dockingMode)else system.print(\"[E] Invalid docking mode\")end;function writeVectorToDb(dP,dQ)if not(flightModeDb and vec3.isvector(dP))then return end;flightModeDb.setFloatValue(dQ..\"X\",dP.x)flightModeDb.setFloatValue(dQ..\"Y\",dP.y)flightModeDb.setFloatValue(dQ..\"Z\",dP.z)if settingsActive then settingsActive=false end;system.print(\"Wrote \"..dQ..': '..tostring(dP))end;function readVectorFromDb(dQ)if not(flightModeDb and flightModeDb.hasKey(dQ..\"X\"))then return end;local h=vec3(0,0,0)h.x=flightModeDb.getFloatValue(dQ..\"X\")h.y=flightModeDb.getFloatValue(dQ..\"Y\")h.z=flightModeDb.getFloatValue(dQ..\"Z\")system.print(\"Read \"..dQ..': '..tostring(h))return h end;function gearToggle()if unit.isAnyLandingGearExtended()then unit.retractLandingGears()else unit.extendLandingGears()unit.switchOnHeadlights()end end;function scaleViewBound(dg,dh,di,dj,df)return(df-dg)/(dh-dg)*(dj-di)+di end;function switchFlightMode(dR)SHUD.Init(system,unit,keybindPresets[dR])keybindPreset=dR;if flightModeDb then flightModeDb.setStringValue(\"flightMode\",dR)end end;function switchControlMode()ship.alternateCM=not ship.alternateCM end;function swapForceFields()if not manualSwitches or#manualSwitches==0 then return end;if player.isFrozen()then manualSwitches[1].activate()for F,d9 in ipairs(forceFields)do d9.deactivate()end else manualSwitches[1].deactivate()for F,d9 in ipairs(forceFields)do d9.activate()end end end;ship.customTarget=ship.world.position;ship.rot=ship.world.forward;if flightModeDb~=nil then if not flightModeDb.hasKey(\"verticalSpeedLimitAtmo\")or updateSettings then flightModeDb.setFloatValue(\"verticalSpeedLimitAtmo\",verticalSpeedLimitAtmo)ship.verticalSpeedLimitAtmo=verticalSpeedLimitAtmo else ship.verticalSpeedLimitAtmo=flightModeDb.getFloatValue(\"verticalSpeedLimitAtmo\")end;if not flightModeDb.hasKey(\"verticalSpeedLimitSpace\")or updateSettings then flightModeDb.setFloatValue(\"verticalSpeedLimitSpace\",verticalSpeedLimitSpace)ship.verticalSpeedLimitSpace=verticalSpeedLimitSpace else ship.verticalSpeedLimitSpace=flightModeDb.getFloatValue(\"verticalSpeedLimitSpace\")end;if not flightModeDb.hasKey(\"approachSpeed\")or updateSettings then flightModeDb.setFloatValue(\"approachSpeed\",approachSpeed)ship.approachSpeed=approachSpeed else ship.approachSpeed=flightModeDb.getFloatValue(\"approachSpeed\")end;if not flightModeDb.hasKey(\"altHoldPreset1\")or updateSettings then flightModeDb.setFloatValue(\"altHoldPreset1\",altHoldPreset1)ship.altHoldPreset1=altHoldPreset1 else ship.altHoldPreset1=flightModeDb.getFloatValue(\"altHoldPreset1\")end;if not flightModeDb.hasKey(\"altHoldPreset2\")or updateSettings then flightModeDb.setFloatValue(\"altHoldPreset2\",altHoldPreset2)ship.altHoldPreset2=altHoldPreset2 else ship.altHoldPreset2=flightModeDb.getFloatValue(\"altHoldPreset2\")end;if not flightModeDb.hasKey(\"altHoldPreset3\")or updateSettings then flightModeDb.setFloatValue(\"altHoldPreset3\",altHoldPreset3)ship.altHoldPreset3=altHoldPreset3 else ship.altHoldPreset3=flightModeDb.getFloatValue(\"altHoldPreset3\")end;if not flightModeDb.hasKey(\"altHoldPreset4\")or updateSettings then flightModeDb.setFloatValue(\"altHoldPreset4\",altHoldPreset4)ship.altHoldPreset4=altHoldPreset4 else ship.altHoldPreset4=flightModeDb.getFloatValue(\"altHoldPreset4\")end;if flightModeDb.hasKey(\"BaseLocX\")then ship.customTarget=readVectorFromDb(\"BaseLoc\")else system.print(\"[W] No RTB set!\")config.setBaseActive=true end;if not config.setBaseActive and flightModeDb.hasKey(\"BaseRotX\")then ship.rot=readVectorFromDb(\"BaseRot\")else config.setBaseActive=true end end;if not config.setBaseActive then system.print('Base: '..tostring(ship.customTarget))end;config.rtb=helios:closestBody(ship.customTarget):getAltitude(ship.customTarget)ship.baseAltitude=config.rtb;system.print(\"[I] Altitude: \"..ship.baseAltitude)function setBase(q)if q==nil then ship.customTarget=ship.world.position;ship.rot=ship.world.right:cross(ship.nearestPlanet:getGravity(construct.getWorldPosition()))writeVectorToDb(ship.customTarget,\"BaseLoc\")writeVectorToDb(ship.rot,\"BaseRot\")elseif string.find(q,\"::pos\")~=nil then ship.customTarget=ship.nearestPlanet:convertToWorldCoordinates(q)writeVectorToDb(ship.customTarget,\"BaseLoc\")writeVectorToDb(ship.rot,\"BaseRot\")end;system.print(\"Base Position: \"..tostring(ship.nearestPlanet:convertToMapPosition(ship.customTarget)))config.rtb=helios:closestBody(ship.customTarget):getAltitude(ship.customTarget)ioScheduler.queueData(config)end;local dS=DUTTY;dS.onCommand('setbase',function(q)setBase(q)end)keybindPresets[\"keyboard\"]=KeybindController()keybindPresets[\"keyboard\"].Init=function()keybindPreset=\"keyboard\"ship.ignoreVerticalThrottle=true;ship.throttle=1 end;keybindPresets[\"keyboard\"].keyDown.up.Add(function()ship.direction.z=1;if not ship.counterGravity then ship.counterGravity=true end end)keybindPresets[\"keyboard\"].keyUp.up.Add(function()ship.direction.z=0 end)keybindPresets[\"keyboard\"].keyDown.down.Add(function()ship.direction.z=-1 end)keybindPresets[\"keyboard\"].keyUp.down.Add(function()ship.direction.z=0 end)keybindPresets[\"keyboard\"].keyDown.yawleft.Add(function()ship.rotation.z=-1 end)keybindPresets[\"keyboard\"].keyUp.yawleft.Add(function()ship.rotation.z=0;ship.rotationSpeedz=ship.minRotationSpeed end)keybindPresets[\"keyboard\"].keyDown.yawright.Add(function()ship.rotation.z=1 end)keybindPresets[\"keyboard\"].keyUp.yawright.Add(function()ship.rotation.z=0;ship.rotationSpeedz=ship.minRotationSpeed end)keybindPresets[\"keyboard\"].keyDown.forward.Add(function()ship.direction.y=1 end)keybindPresets[\"keyboard\"].keyUp.forward.Add(function()ship.direction.y=0 end)keybindPresets[\"keyboard\"].keyDown.backward.Add(function()ship.direction.y=-1 end)keybindPresets[\"keyboard\"].keyUp.backward.Add(function()ship.direction.y=0 end)keybindPresets[\"keyboard\"].keyDown.backward.Add(function()ship.direction.y=-1 end)keybindPresets[\"keyboard\"].keyUp.backward.Add(function()ship.direction.y=0 end)keybindPresets[\"keyboard\"].keyDown.left.Add(function()ship.direction.x=-1 end)keybindPresets[\"keyboard\"].keyUp.left.Add(function()ship.direction.x=0 end)keybindPresets[\"keyboard\"].keyDown.right.Add(function()ship.direction.x=1 end)keybindPresets[\"keyboard\"].keyUp.right.Add(function()ship.direction.x=0 end)keybindPresets[\"keyboard\"].keyDown.lshift.Add(function()dO=true end,\"Shift Modifier\")keybindPresets[\"keyboard\"].keyUp.lshift.Add(function()dO=false end)keybindPresets[\"keyboard\"].keyDown.brake.Add(function()ship.brake=true end)keybindPresets[\"keyboard\"].keyUp.brake.Add(function()ship.brake=false end)keybindPresets[\"keyboard\"].keyUp.stopengines.Add(function()SHUD.Select()if not SHUD.Enabled then if ship.direction.y==1 then ship.direction.y=0 else ship.direction.y=1 end end end,\"Cruise\")keybindPresets[\"keyboard\"].keyUp.gear.Add(function()useGEAS=not useGEAS;updateGEAS()end)keybindPresets[\"keyboard\"].keyUp.speedup.Add(function()SHUD.Enabled=not SHUD.Enabled end)keybindPresets[\"keyboard\"].keyUp[\"option1\"].Add(function()ship.inertialDampeningDesired=not ship.inertialDampeningDesired end,\"Inertial Dampening\")keybindPresets[\"keyboard\"].keyUp[\"option2\"].Add(function()player.freeze(not player.isFrozen())swapForceFields()end,\"Freeze character\")keybindPresets[\"keyboard\"].keyUp[\"option3\"].Add(function()ship.followGravity=not ship.followGravity end,\"Gravity Follow\")keybindPresets[\"keyboard\"].keyUp[\"option4\"].Add(function()ship.counterGravity=not ship.counterGravity end,\"Counter Gravity\")keybindPresets[\"keyboard\"].keyUp[\"option5\"].Add(function()ship.verticalLock=true;ship.lockVector=vec3(construct.getWorldOrientationUp())ship.lockPos=vec3(construct.getWorldPosition())+vec3(construct.getWorldOrientationUp())if flightModeDb~=nil then flightModeDb.setFloatValue(\"lockVectorX\",ship.lockVector.x)flightModeDb.setFloatValue(\"lockVectorY\",ship.lockVector.y)flightModeDb.setFloatValue(\"lockVectorZ\",ship.lockVector.z)flightModeDb.setFloatValue(\"lockPosX\",ship.lockPos.x)flightModeDb.setFloatValue(\"lockPosY\",ship.lockPos.y)flightModeDb.setFloatValue(\"lockPosZ\",ship.lockPos.z)end end,\"Set Vertical Lock\")keybindPresets[\"keyboard\"].keyUp[\"option6\"].Add(function()ship.verticalLock=not ship.verticalLock end,\"Toggle Vertical Lock\")keybindPresets[\"keyboard\"].keyUp[\"option7\"].Add(function()ship.altitudeHold=ship.baseAltitude;ship.elevatorActive=true;ship.targetDestination=moveWaypointZ(ship.customTarget,0)end,\"RTB\")keybindPresets[\"keyboard\"].keyUp[\"option8\"].Add(function()construct.setDockingMode(0)core.undock()end,\"Undock\")keybindPresets[\"keyboard\"].keyUp[\"option9\"].Add(function()if dO then flightModeDb.clear()system.print(\"DB Cleared\")else ship.verticalLock=false;ship.intertialDampening=true;ship.elevatorActive=false;config.manualControl=not config.manualControl;manualControlSwitch()end end,\"Manual Mode Toggle\")keybindPresets[\"screenui\"]=KeybindController()keybindPresets[\"screenui\"].Init=function()keybindPreset=\"screenui\"ship.ignoreVerticalThrottle=true;ship.throttle=1;player.freeze(true)ship.frozen=false end;keybindPresets[\"screenui\"].keyDown.lshift.Add(function()dO=true end,\"Shift Modifier\")keybindPresets[\"screenui\"].keyUp.lshift.Add(function()dO=false end)keybindPresets[\"screenui\"].keyDown.brake.Add(function()ship.brake=true end)keybindPresets[\"screenui\"].keyUp.brake.Add(function()ship.brake=false end)keybindPresets[\"screenui\"].keyUp[\"option7\"].Add(function()ship.altitudeHold=ship.baseAltitude;ship.elevatorActive=true;ship.targetDestination=moveWaypointZ(ship.customTarget,0)end,\"RTB\")keybindPresets[\"screenui\"].keyUp[\"option8\"].Add(function()construct.setDockingMode(0)core.undock()end,\"Undock\")keybindPresets[\"screenui\"].keyUp[\"option9\"].Add(function()if dO then flightModeDb.clear()system.print(\"DB cleared\")else ship.verticalLock=false;ship.intertialDampening=true;ship.elevatorActive=false;config.manualControl=not config.manualControl;manualControlSwitch()end end,\"Manual Mode Toggle\")if flightModeDb then if not flightModeDb.hasKey(\"flightMode\")then flightModeDb.setStringValue(\"flightMode\",\"keyboard\")end;keybindPreset=flightModeDb.getStringValue(\"flightMode\")else system.print(\"No databank installed.\")keybindPreset=\"keyboard\"end;keybindPreset=\"keyboard\"SHUD.Init(system,unit,keybindPresets[keybindPreset])Task(function()coroutine.yield()SHUD.FreezeUpdate=true;local dT=system.getArkTime()+2;while system.getArkTime()<dT do coroutine.yield()end;SHUD.FreezeUpdate=false;SHUD.IntroPassed=true end)player.freeze(true)ship.frozen=false;function updateGEAS()if useGEAS then unit.activateGroundEngineAltitudeStabilization(ship.hoverHeight)else unit.deactivateGroundEngineAltitudeStabilization()end end;updateGEAS()controlStateChange=true;function normalizeTravelMode()if ship.controlMode==1 and controlStateChange then ship.cruiseSpeed=round(ship.world.velocity:len()*3.6,-1)ship.throttle=0;controlStateChange=false end;if ship.controlMode==0 then controlStateChange=true end end;function autoLandingGear()if ship.world.velocity:len()>=83.3333 then unit.retractLandingGears()else unit.extendLandingGears()end end;config.floors.floor1=ship.altHoldPreset1;config.floors.floor2=ship.altHoldPreset2;config.floors.floor3=ship.altHoldPreset3;config.floors.floor4=ship.altHoldPreset4;elevatorName=construct.getName()config.rtb=helios:closestBody(ship.customTarget):getAltitude(ship.customTarget)config.targetAlt=0;system.print(\"Preset 1: \"..config.floors.floor1)system.print(\"Preset 2: \"..config.floors.floor2)system.print(\"Preset 3: \"..config.floors.floor3)system.print(\"Preset 4: \"..config.floors.floor4)ioScheduler.defaultData=stats;ioScheduler.queueData(config)ioScheduler.queueData(fuelAtmo)ioScheduler.queueData(fuelSpace)ElevatorScreen=function()local self={}function self.updateStats()stats.data.elevation=ship.altitude;stats.data.target=config.targetAlt;stats.data.velocity=ship.world.velocity:len()stats.data.mass=ship.mass;stats.data.gravity=ship.world.gravity:len()stats.data.target_dist=math.abs(ship.altitude-(ship.altitudeHold or 0))stats.data.brake_dist=ship.brakeDistance;stats.data.deviation=ship.deviation;stats.data.deviationVec=ship.worldToLocal(ship.deviationVec)stats.data.deviationRot=ship.worldToLocal(ship.deviationRot)stats.data.state=ship.stateMessage;stats.data.delta=nil end;self.updateStats()function self.updateScreenFuel()fuelAtmo.tanks={}fuelSpace.tanks={}for F,c8 in pairs(SHUD.fuel.atmo)do table.insert(fuelAtmo.tanks,fuelTank(c8.time,math.ceil(100*c8.level)))end;for F,c8 in pairs(SHUD.fuel.space)do table.insert(fuelSpace.tanks,fuelTank(c8.time,math.ceil(100*c8.level)))end;ioScheduler.queueData(fuelAtmo)ioScheduler.queueData(fuelSpace)end;if screen then screen.clearScriptOutput()else system.print(\"No screen!\")end;return self end()_G.BuildUnit={}local dU=_G.BuildUnit;_G.BuildSystem={}local dV=_G.BuildSystem;_G.BuildScreen={}local dW=_G.BuildScreen;local dX=nil;function dU.onStart()Events.Flush.Add(ship.apply)Events.Update.Add(SHUD.Update)getFuelRenderedHtml()if screen then manualControlSwitch()system.print(\"Altitude: \"..helios:closestBody(construct.getWorldPosition()):getAltitude(construct.getWorldPosition()))ship.altitudeHold=helios:closestBody(construct.getWorldPosition()):getAltitude(construct.getWorldPosition())ship.baseAltitude=helios:closestBody(ship.customTarget):getAltitude(ship.customTarget)dX=ElevatorScreen else ship.verticalLock=false;ship.intertialDampening=true;ship.elevatorActive=false;config.manualControl=not config.manualControl;manualControlSwitch()end;if system.showHelper then system.showHelper(false)end;if emitter and type(emitter.getRange)==\"function\"then system.print(\"Emitter Range: \"..emitter.getRange())end;if activateFFonStart and manualSwitches and next(manualSwitches)~=nil then for F,d9 in ipairs(manualSwitches)do d9.activate()end end;unit.setTimer(\"SHUDRender\",0.02)unit.setTimer(\"FuelStatus\",3)unit.setTimer(\"DockingTrigger\",1)if laser then laser.deactivate()end;system.print([[Horizon 1.0.1.13]])if showDockingWidget then parentingPanelId=system.createWidgetPanel(\"Docking\")parentingWidgetId=system.createWidget(parentingPanelId,\"parenting\")system.addDataToWidget(unit.getWidgetDataId(),parentingWidgetId)end;if setBaseOnStart then setBase()end end;function dU.onStop()if manualSwitches and next(manualSwitches)then for F,d9 in ipairs(manualSwitches)do d9.deactivate()end end;config.shutDown=true;if screen then screen.setScriptInput(serialize(config))end;system.showScreen(false)if laser then laser.deactivate()end;if forceFields and next(forceFields)then for F,d9 in ipairs(forceFields)do d9.deactivate()end end end;function manualControlSwitch()if not config.manualControl then SHUD.Init(system,unit,keybindPresets[\"screenui\"])system.showScreen(false)player.freeze(false)ship.frozen=true;ship.stateMessage=\"Idle\"else SHUD.Init(system,unit,keybindPresets[\"keyboard\"])system.showScreen(true)player.freeze(true)ship.frozen=false;ship.stateMessage=\"Manual Control\"end end;local dY=false;local dZ=ship.dockingClamps;function dU.onTimer(d_)if d_==\"SHUDRender\"then if screen==nil then if SHUD then SHUD.Render()end elseif config.manualControl then if SHUD then SHUD.Render()end;if enableARReticle then updateAR()end end end;if d_==\"FuelStatus\"then getFuelRenderedHtml()if dX then dX.updateScreenFuel()end end;if d_==\"DockingTrigger\"then if telemeter~=nil then telDistance=telemeter.raycast().distance end;if ship.dockingClamps then if laser~=nil then laser.activate()end;if telemeter and telDistance>0 and telDistance<1 then if ship.autoShutdown and not config.manualControl then unit.exit()end end end end end;function dV.onActionStart(dd)keybindPresets[keybindPreset].Call(dd,\"down\")end;function dV.onActionStop(dd)keybindPresets[keybindPreset].Call(dd,\"up\")end;function dV.onInputText(dd)if DUTTY then DUTTY.input(dd)end end;function dV.onActionLoop(dd)end;function dV.onUpdate()if dX then dX.updateStats()end;ioScheduler.update()if Events then Events.Update()end;if TaskManager then TaskManager.Update()end end;function dV.onFlush()if Events then Events.Flush()end end;function dW.onMouseDown(b3,b4,e0)end;function toggleVerticalLock()ship.lockVector=vec3(construct.getWorldOrientationUp())ship.lockPos=vec3(construct.getWorldPosition())+vec3(construct.getWorldOrientationUp())end;function createBreadcrumbTrail(e1)local e2=moveWaypointZ(ship.customTarget,ship.world.atlasAltitude-ship.baseAltitude)local e3=moveWaypointZ(ship.customTarget,e1)local aj=e2-e1:len()if aj<1000 then return end;for z=1,round2(aj/1000,0),1 do if ship.nearestPlanet:getAltitude(e2)<ship.nearestPlanet:getAltitude(e3)then table.insert(ship.breadCrumbs,moveWaypointZ(e2,1000*z))else table.insert(ship.breadCrumbs,moveWaypointZ(e2,-1000*z))end end end;function dW.onMouseUp(b3,b4,e0)end",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "0"
    },
    {
      "code": "_G.BuildUnit.onStart()",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "1"
    },
    {
      "code": "_G.BuildUnit.onStop()",
      "filter": {
        "args": [],
        "signature": "onStop",
        "slotKey": "-1"
      },
      "key": "2"
    },
    {
      "code": "_G.BuildSystem.onActionStart(action)",
      "filter": {
        "args": [
          {
            "variable": "*"
          }
        ],
        "signature": "onActionStart(action)",
        "slotKey": "-2"
      },
      "key": "3"
    },
    {
      "code": "_G.BuildSystem.onActionStop(action)",
      "filter": {
        "args": [
          {
            "variable": "*"
          }
        ],
        "signature": "onActionStop(action)",
        "slotKey": "-2"
      },
      "key": "4"
    },
    {
      "code": "_G.BuildSystem.onInputText(action)",
      "filter": {
        "args": [
          {
            "variable": "*"
          }
        ],
        "signature": "onInputText(action)",
        "slotKey": "-2"
      },
      "key": "5"
    },
    {
      "code": "_G.BuildSystem.onUpdate()",
      "filter": {
        "args": [],
        "signature": "onUpdate",
        "slotKey": "-2"
      },
      "key": "6"
    },
    {
      "code": "_G.BuildSystem.onFlush()",
      "filter": {
        "args": [],
        "signature": "onFlush",
        "slotKey": "-2"
      },
      "key": "7"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"SHUDRender\")",
      "filter": {
        "args": [
          {
            "variable": "SHUDRender"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "8"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"FuelStatus\")",
      "filter": {
        "args": [
          {
            "variable": "FuelStatus"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "9"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"DockingTrigger\")",
      "filter": {
        "args": [
          {
            "variable": "DockingTrigger"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "10"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "0"
      },
      "key": "11"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "0"
      },
      "key": "12"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "0"
      },
      "key": "13"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "1"
      },
      "key": "14"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "1"
      },
      "key": "15"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "1"
      },
      "key": "16"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "2"
      },
      "key": "17"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "2"
      },
      "key": "18"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "2"
      },
      "key": "19"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "3"
      },
      "key": "20"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "3"
      },
      "key": "21"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "3"
      },
      "key": "22"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "4"
      },
      "key": "23"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "4"
      },
      "key": "24"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "4"
      },
      "key": "25"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "5"
      },
      "key": "26"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "5"
      },
      "key": "27"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "5"
      },
      "key": "28"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "6"
      },
      "key": "29"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "6"
      },
      "key": "30"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "6"
      },
      "key": "31"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "7"
      },
      "key": "32"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "7"
      },
      "key": "33"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "7"
      },
      "key": "34"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "8"
      },
      "key": "35"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "8"
      },
      "key": "36"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "8"
      },
      "key": "37"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "9"
      },
      "key": "38"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "9"
      },
      "key": "39"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "9"
      },
      "key": "40"
    }
  ],
  "methods": [],
  "events": []
}