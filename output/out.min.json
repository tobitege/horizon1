{
  "slots": {
    "0": {
      "name": "slot1",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "1": {
      "name": "slot2",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "2": {
      "name": "slot3",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "3": {
      "name": "slot4",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "4": {
      "name": "slot5",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "5": {
      "name": "slot6",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "6": {
      "name": "slot7",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "7": {
      "name": "slot8",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "8": {
      "name": "slot9",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "9": {
      "name": "slot10",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "10": {
      "name": "slot11",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "11": {
      "name": "slot12",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "12": {
      "name": "slot13",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "13": {
      "name": "slot14",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "14": {
      "name": "slot15",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "15": {
      "name": "slot16",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "16": {
      "name": "slot17",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "17": {
      "name": "slot18",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "18": {
      "name": "slot19",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "19": {
      "name": "slot20",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "20": {
      "name": "slot21",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-3": {
      "name": "library",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-2": {
      "name": "system",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-1": {
      "name": "unit",
      "type": {
        "events": [],
        "methods": []
      }
    }
  },
  "handlers": [
    {
      "code": "shipName=\"\"updateSettings=false;altHoldPreset1=132000.845;altHoldPreset2=1005;altHoldPreset3=50;altHoldPreset4=2;deviationThreshold=0.5;inertialDampening=true;followGravity=true;minRotationSpeed=0.01;maxRotationSpeed=5;rotationStep=0.03;verticalSpeedLimitAtmo=1100;verticalSpeedLimitSpace=4000;approachSpeed=200;autoShutdown=true;breadCrumbDist=1000;ContainerOptimization=0;FuelTankOptimization=0;fuelTankHandlingAtmo=0;fuelTankHandlingSpace=0;primaryColor=\"b80000\"secondaryColor=\"e30000\"textShadow=\"e81313\"ARCrosshair=\"ebbb0c\"fuelFontSize=1.8;showDockingWidget=true;dockingMode=1;setBaseOnStart=false;useGEAS=false;GEAS_Alt=10;activateFFonStart=false;local a=false;mouseSensitivity=1;enableARReticle=false;function PlanetRef()local function b(c)return type(c)=='number'end;local function d(c)return type(tonumber(c))=='number'end;local function e(t)return type(t)=='table'end;local function f(g)return type(g)=='string'end;local function h(i)return e(i)and b(i.x and i.y and i.z)end;local function j(k)return e(k)and b(k.latitude and k.longitude and k.altitude and k.bodyId and k.systemId)end;local l=math.pi/180;local m=180/math.pi;local n=1e-10;local o=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local p='::pos{'..o..','..o..','..o..','..o..','..o..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local clamp=utils.clamp;local function q(r,s)if r==0 then return math.abs(s)<1e-09 end;if s==0 then return math.abs(r)<1e-09 end;return math.abs(r-s)<math.max(math.abs(r),math.abs(s))*n end;local function u(c)local v=string.gsub(string.reverse(string.format('%.4f',c)),'^0*%.?','')return v==''and'0'or string.reverse(v)end;local function w(x)if h(x)then return string.format('{x=%.3f,y=%.3f,z=%.3f}',x.x,x.y,x.z)end;if e(x)and not getmetatable(x)then local y={}local z=next(x)if type(z)=='nil'or z==1 then for A,r in ipairs(x)do y[A]=w(r)end else for B,i in pairs(x)do local C=w(i)if type(B)=='number'then table.insert(y,string.format('[%s]=%s',B,C))else table.insert(y,string.format('%s=%s',B,C))end end end;return string.format('{%s}',table.concat(y,','))end;if f(x)then return string.format(\"[[%s]]\",x)end;return tostring(x)end;local D={}D.__index=D;D.__tostring=function(x,E)local F={}for B in pairs(x)do table.insert(F,B)end;table.sort(F)local y={}for G,B in ipairs(F)do local C=w(x[B])if type(B)=='number'then table.insert(y,string.format('[%s]=%s',B,C))else table.insert(y,string.format('%s=%s',B,C))end end;if E then return string.format('%s%s',E,table.concat(y,',\\n'..E))end;return string.format('{%s}',table.concat(y,','))end;D.__eq=function(H,I)return H.planetarySystemId==I.planetarySystemId and H.bodyId==I.bodyId and q(H.radius,I.radius)and q(H.center.x,I.center.x)and q(H.center.y,I.center.y)and q(H.center.z,I.center.z)and q(H.GM,I.GM)end;local function J(K,L,M,N,O)assert(d(K),'Argument 1 (planetarySystemId) must be a number:'..type(K))assert(d(L),'Argument 2 (bodyId) must be a number:'..type(L))assert(d(M),'Argument 3 (radius) must be a number:'..type(M))assert(e(N),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(N))assert(d(O),'Argument 5 (GM) must be a number:'..type(O))return setmetatable({planetarySystemId=tonumber(K),bodyId=tonumber(L),radius=tonumber(M),center=vec3(N),GM=tonumber(O)},D)end;local P={}P.__index=P;P.__tostring=function(Q)return string.format('::pos{%d,%d,%s,%s,%s}',Q.systemId,Q.bodyId,u(Q.latitude*m),u(Q.longitude*m),u(Q.altitude))end;P.__eq=function(H,I)return H.bodyId==I.bodyId and H.systemId==I.systemId and q(H.latitude,I.latitude)and q(H.altitude,I.altitude)and(q(H.longitude,I.longitude)or q(H.latitude,math.pi/2)or q(H.latitude,-math.pi/2))end;local function R(S,L,T,U,V)local K=S;if f(S)and not U and not V and not L and not T then K,L,T,U,V=string.match(S,p)assert(K,'Argument 1 (position string) is malformed.')else assert(d(K),'Argument 1 (systemId) must be a number:'..type(K))assert(d(L),'Argument 2 (bodyId) must be a number:'..type(L))assert(d(T),'Argument 3 (latitude) must be in degrees:'..type(T))assert(d(U),'Argument 4 (longitude) must be in degrees:'..type(U))assert(d(V),'Argument 5 (altitude) must be in meters:'..type(V))end;K=tonumber(K)L=tonumber(L)T=tonumber(T)U=tonumber(U)V=tonumber(V)if L==0 then return setmetatable({latitude=T,longitude=U,altitude=V,bodyId=L,systemId=K},P)end;return setmetatable({latitude=l*clamp(T,-90,90),longitude=l*(U%360),altitude=V,bodyId=L,systemId=K},P)end;local W={}W.__index=W;W.__tostring=function(x,E)local X=E and E..'  'local Y={}local F={}for B in pairs(x)do table.insert(F,B)end;table.sort(F)for G,Z in ipairs(F)do bdy=x[Z]local _=D.__tostring(bdy,X)if E then table.insert(Y,string.format('[%s]={\\n%s\\n%s}',Z,_,E))else table.insert(Y,string.format('  [%s]=%s',Z,_))end end;if E then return string.format('\\n%s%s%s',E,table.concat(Y,',\\n'..E),E)end;return string.format('{\\n%s\\n}',table.concat(Y,',\\n'))end;local function a0(a1)local a2={}local a3;for G,i in pairs(a1)do local a4=i.planetarySystemId;if a4==nil then a4=0;i.planetarySystemId=a4 end;if type(a4)~='number'then error('Invalid planetary system ID: '..tostring(a4))elseif a3 and a4~=a3 then error('Mismatch planetary system IDs: '..a4 ..' and '..a3)end;local a5=i.bodyId;if a5==nil then a5=i.id;i.bodyId=a5 end;if type(a5)~='number'then error('Invalid body ID: '..tostring(a5))elseif a2[a5]then error('Duplicate body ID: '..tostring(a5))end;i.center=vec3(i.center)a2[a5]=setmetatable(i,D)a3=a4 end;return setmetatable(a2,W)end;PlanetaryReference={}local function a6(a7)return setmetatable({galaxyAtlas=a7 or{}},PlanetaryReference)end;PlanetaryReference.__index=function(t,A)if type(A)=='number'then local system=t.galaxyAtlas[A]return a0(system)end;return rawget(PlanetaryReference,A)end;PlanetaryReference.__pairs=function(x)return function(t,B)local a8,a9=next(t,B)return a8,a9 and a0(a9)end,x.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(x)local aa={}for G,ab in pairs(x or{})do local ac=ab:getPlanetarySystemId()local ad=W.__tostring(ab,'    ')table.insert(aa,string.format('  [%s]={%s\\n  }',ac,ad))end;return string.format('{\\n%s\\n}\\n',table.concat(aa,',\\n'))end;PlanetaryReference.BodyParameters=J;PlanetaryReference.MapPosition=R;PlanetaryReference.PlanetarySystem=a0;function PlanetaryReference.createBodyParameters(ae,L,af,ag,ah,ai,aj)assert(d(ae),'Argument 1 (planetarySystemId) must be a number:'..type(ae))assert(d(L),'Argument 2 (bodyId) must be a number:'..type(L))assert(d(af),'Argument 3 (surfaceArea) must be a number:'..type(af))assert(e(ag),'Argument 4 (aPosition) must be an array or vec3:'..type(ag))assert(e(ah),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(ah))assert(d(ai),'Argument 6 (altitude) must be in meters:'..type(ai))assert(d(aj),'Argument 7 (gravityAtPosition) must be number:'..type(aj))local M=math.sqrt(af/4/math.pi)local ak=M+ai;local al=vec3(ag)+ak*vec3(ah)local O=aj*ak*ak;return J(ae,L,M,al,O)end;PlanetaryReference.isMapPosition=j;function PlanetaryReference:getPlanetarySystem(S)if self.galaxyAtlas then local ae=S;if j(S)then ae=S.systemId end;if type(ae)=='number'then local system=self.galaxyAtlas[ae]if system then if getmetatable(system)~=W then system=a0(system)end;return system end end end;return nil end;function W:castIntersections(am,an,ao,ap)local ao=ao or function(aq)return 1.05*aq.radius end;local ar={}if ap then for G,A in ipairs(ap)do ar[A]=self[A]end else ap={}for B,aq in pairs(self)do table.insert(ap,B)ar[B]=aq end end;local function as(at,au)local av=ar[at].center-am;local aw=ar[au].center-am;return av:len()<aw:len()end;table.sort(ap,as)local ax=an:normalize()for A,a4 in ipairs(ap)do local aq=ar[a4]local ay=aq.center-am;local M=ao(aq)local az=ay:dot(ax)local aA=az^2-(ay:len2()-M^2)if aA>=0 then local aB=math.sqrt(aA)local aC=az+aB;local aD=az-aB;if aD>0 then return aq,aC,aD elseif aC>0 then return aq,aC,nil end end end;return nil,nil,nil end;function W:closestBody(aE)assert(type(aE)=='table','Invalid coordinates.')local aF,aq;local aG=vec3(aE)for G,aH in pairs(self)do local aI=aH.center-aG:len2()if not aq or aI<aF then aq=aH;aF=aI end end;return aq end;function W:convertToBodyIdAndWorldCoordinates(S)local aJ=S;if f(S)then aJ=R(S)end;if aJ.bodyId==0 then return 0,vec3(aJ.latitude,aJ.longitude,aJ.altitude)end;local aH=self:getBodyParameters(aJ)if aH then return aJ.bodyId,aH:convertToWorldCoordinates(aJ)end end;function W:getBodyParameters(S)local L=S;if j(S)then L=S.bodyId end;assert(d(L),'Argument 1 (bodyId) must be a number:'..type(L))return self[L]end;function W:getPlanetarySystemId()local B,i=next(self)return i and i.planetarySystemId end;function W:netGravity(aE)assert(type(aE)=='table','Invalid coordinates.')local aK=vec3()local aG=vec3(aE)local aL,aq;for G,aH in pairs(self)do local aM=aH.center-aG;local aN=aM:len2()local aO=aH.GM/aN;if not aq or aO>aL then aq=aH;aL=aO end;aK=aK+aO/math.sqrt(aN)*aM end;return aq,aK end;function D:convertToMapPosition(N)assert(e(N),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(N))local aP=vec3(N)if self.bodyId==0 then return setmetatable({latitude=aP.x,longitude=aP.y,altitude=aP.z,bodyId=0,systemId=self.planetarySystemId},P)end;local aQ=aP-self.center;local ak=aQ:len()local V=ak-self.radius;local T=0;local U=0;if not q(ak,0)then local aR=math.atan(aQ.y,aQ.x)U=aR>=0 and aR or 2*math.pi+aR;T=math.pi/2-math.acos(aQ.z/ak)end;return setmetatable({latitude=T,longitude=U,altitude=V,bodyId=self.bodyId,systemId=self.planetarySystemId},P)end;function D:convertToWorldCoordinates(S)local aJ=f(S)and R(S)or S;if aJ.bodyId==0 then return vec3(aJ.latitude,aJ.longitude,aJ.altitude)end;assert(j(aJ),'Argument 1 (mapPosition) is not an instance of \"MapPosition\".')assert(aJ.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(aJ.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local aS=math.cos(aJ.latitude)return self.center+(self.radius+aJ.altitude)*vec3(aS*math.cos(aJ.longitude),aS*math.sin(aJ.longitude),math.sin(aJ.latitude))end;function D:getAltitude(N)return vec3(N)-self.center:len()-self.radius end;function D:getDistance(N)return vec3(N)-self.center:len()end;function D:getGravity(N)local aM=self.center-vec3(N)local aN=aM:len2()return self.GM/aN*aM/math.sqrt(aN)end;return setmetatable(PlanetaryReference,{__call=function(G,...)return a6(...)end})end;function Kinematics()local r={}local s=30000000/3600;local aT=s*s;local aU=100;local function aV(aW)return 1/math.sqrt(1-aW*aW/aT)end;function r.computeAccelerationTime(aO,aX,A)local aY=s*math.asin(aO/s)return(s*math.asin(A/s)-aY)/aX end;function r.computeDistanceAndTime(aO,A,B,aZ,k,c)k=k or 0;c=c or 0;local a_=aV(aO)local Q=aO<=A;local b0=aZ*(Q and 1 or-1)/B;local b1=-c/B;local g=b0+b1;if Q and g<=0 or not Q and g>=0 then return-1,-1 end;local t,b2=0,0;if b0~=0 and k>0 then local aY=math.asin(aO/s)local i=math.pi*(b0/2+b1)local b3=b0*k;local b4=s*math.pi;local aW=function(b5)local b6=(i*b5-b3*math.sin(math.pi*b5/2/k)+b4*aY)/b4;local b7=math.tan(b6)return s*b7/math.sqrt(b7*b7+1)end;local b8=Q and function(b9)return b9>=A end or function(b9)return b9<=A end;b2=2*k;if b8(aW(b2))then local ba=0;while math.abs(b2-ba)>0.5 do local b5=(b2+ba)/2;if b8(aW(b5))then b2=b5 else ba=b5 end end end;local bb=aO;local bc=b2/aU;for bd=1,aU do local be=aW(bd*bc)t=t+(be+bb)*bc/2;bb=be end;if b2<2*k then return t,b2 end;aO=bb end;local aY=s*math.asin(aO/s)local bf=(s*math.asin(A/s)-aY)/g;local bg=aT*math.cos(aY/s)/g;local bh=bg-aT*math.cos((g*bf+aY)/s)/g;return bh+t,bf+b2 end;function r.computeTravelTime(aO,aX,bh)if bh==0 then return 0 end;if aX>0 then local aY=s*math.asin(aO/s)local bg=aT*math.cos(aY/s)/aX;return(s*math.acos(aX*(bg-bh)/aT)-aY)/aX end;assert(aO>0,'Acceleration and initial speed are both zero.')return bh/aO end;function r.lorentz(aW)return aV(aW)end;return r end;core=nil;antigrav=nil;warpDrive=nil;radarUnit=nil;flightModeDb=nil;manualSwitches={}forceFields={}laser=nil;screen=nil;settingsActive=false;emitter=nil;telemeter=nil;function getElements()for r,s in pairs(_G)do if type(s)==\"table\"and s[\"getClass\"]then local aT=s[\"getClass\"]()if aT==\"CoreUnitDynamic\"or aT==\"CoreUnitStatic\"or aT==\"CoreUnitSpace\"then core=s end;if aT==\"AtmoFuelContainer\"or aT==\"SpaceFuelContainer\"then s.showWidget()end;if aT==\"WarpDriveUnit\"then warpDrive=s;s.showWidget()end;if aT==\"RadarPvPAtmospheric\"or aT==\"RadarPvPSpace\"then radarUnit=s;s.showWidget()end;if aT==\"DataBankUnit\"then flightModeDb=s end;if aT==\"AntiGravityGeneratorUnit\"then antigrav=s end;if aT==\"ManualSwitchUnit\"then table.insert(manualSwitches,s)end;if aT==\"ForceFieldUnit\"then table.insert(forceFields,s)end;if aT==\"ScreenUnit\"then screen=s end;if aT==\"LaserEmitterUnit\"then laser=s end;if aT==\"EmitterUnit\"then emitter=s end;if aT==\"TelemeterUnit\"then telemeter=s end end end end;getElements()local bi=table.concat;local bj=string.format;local function bk(i,bl,t)local bm=type(i)local bn=bk;if bm=='table'then t[bl]='{'local bo=bl+1;if#i==0 then for B,aV in pairs(i)do if type(B)~='number'then t[bo]=B;t[bo+1]='='bo=bo+2 else t[bo]='['t[bo+1]=B;t[bo+2]=']='bo=bo+3 end;bo=bn(aV,bo,t)t[bo]=','bo=bo+1 end else for B,aV in pairs(i)do bo=bn(aV,bo,t)t[bo]=','bo=bo+1 end end;if bo==bl+1 then t[bo]='}'return bo+1 else t[bo-1]='}'return bo end elseif bm=='string'then t[bl]=bj(\"%q\",i)return bl+1 elseif bm=='number'then t[bl]=tostring(i)return bl+1 else t[bl]=i and'true'or'false'return bl+1 end end;function serialize(i)local t={}local bl=1;local bm=type(i)local bn=bk;if bm=='table'then t[bl]='{'bl=bl+1;local bo=bl;if#i==0 then for B,aV in pairs(i)do if type(B)~='number'then t[bo]=B;t[bo+1]='='bo=bo+2 else t[bo]='['t[bo+1]=B;t[bo+2]=']='bo=bo+3 end;bo=bn(aV,bo,t)t[bo]=','bo=bo+1 end else for B,aV in pairs(i)do bo=bn(aV,bo,t)t[bo]=','bo=bo+1 end end;if bo==bl then t[bo]='}'else t[bo-1]='}'end elseif bm=='string'then t[bl]=bj(\"%q\",i)elseif bm=='number'then t[bl]=tostring(i)else t[bl]=i and'true'or'false'end;return bi(t)end;function deserialize(g)local aW=load('t='..g)aW()return t end;function tryDeserialize(g)local aW=load('t='..g)if aW then aW()return true,t else return false end end;function mToKm(c)if c==nil then return\"nan\"end;if c>=1000 then return round2(c/1000,2)..\" km\"end;return round2(c,2)..\" m\"end;function round2(o,bp)if o~=nil then return tonumber(string.format(\"%.\"..(bp or 0)..\"f\",o))or 0 end;return 0 end;config={dataType=\"config\",floors={floor1=0,floor2=0,floor3=0,floor4=0},elevatorName=construct.getName(),rtb=0,targetAlt=0,estop=false,settingsActive=false,setBaseActive=false,setBaseReq=false,manualControl=false,destination=nil,shutDown=false,updateReq=false}stats={dataType=\"stats\",data={elevation=0,target=config.targetAlt,velocity=0,mass=0,gravity=0,target_dist=0,brake_dist=0,deviation=0,deviationVec=vec3(0,0,0),deviationRot=vec3(0,0,0),state=\"Idle\",delta=0}}fuelAtmo={dataType=\"fuelAtmo\",tanks={}}fuelSpace={dataType=\"fuelSpace\",tanks={}}function fuelTank(bq,br)local bs={}bs.__index=bs;return setmetatable({tm=bq,pct=br},bs)end;function EventDelegate()local r={}r.Delegates={}function r.Add(s)if type(s)~=\"function\"then error(\"[EventDelegate] Unable to add callback - not a function\")return end;for aT=1,#r.Delegates do if r.Delegates[aT]==s then return false end end;table.insert(r.Delegates,s)return true end;function r.Remove(s)if type(s)~=\"function\"then error(\"[EventDelegate] Unable to remove callback - not a function\")return end;for aT=1,#r.Delegates do if r.Delegates[aT]==s then table.remove(r.Delegates,aT)return true end end;return false end;function r.Call(...)for aT=1,#r.Delegates do r.Delegates[aT](...)end end;function r.Count()return#r.Delegates end;setmetatable(r,{__call=function(aU,...)r.Call(...)end,__add=function(aV,aW)if aV==r then r.Add(aW)return r end;if aW==r then r.Add(aV)return r end;return r end,__sub=function(aV,aW)if aV==r then r.Remove(aW)return r end;if aW==r then r.Remove(aV)return r end;return r end,__tostring=function()return\"EventDelegate(#\"..#r.Delegates..\")\"end})return r end;Events={Update=EventDelegate(),Flush=EventDelegate()}TaskManager=function()local self={}self.Stack={}function self.Register(r)if not r.Coroutine then error(\"[TaskManager] Trying to register a non-Task\")end;table.insert(self.Stack,r)end;function self.Update()for s=1,#self.Stack do local r=self.Stack[s]if r and r.Coroutine~=nil then if coroutine.status(r.Coroutine)~=\"dead\"then local aT,aU=coroutine.resume(r.Coroutine)r.Error=not aT;r.LastReturn=aU else table.remove(self.Stack,s)if r.Error and r._Catch then r._Catch(r.LastReturn)elseif r._Then~=nil then r._Then(r.LastReturn)end;if r._Finally~=nil then r._Finally()end;r.Finished=true end end end end;return self end()function Task(aV)local self={}self.LastReturn=nil;self.Error=nil;self.Finished=false;if type(aV)~=\"function\"then error(\"[Task] Not a function.\")end;self.Coroutine=coroutine.create(aV)function self.Then(aV)if type(aV)~=\"function\"then error(\"[Task] Then callback not a function.\")end;self._Then=aV;return self end;function self.Finally(aV)if type(aV)~=\"function\"then error(\"[Task] Finally callback not a function.\")end;self._Finally=aV;return self end;function self.Catch(aV)if type(aV)~=\"function\"then error(\"[Task] Catch callback not a function.\")end;self._Catch=aV;return self end;TaskManager.Register(self)return self end;function await(r)if not r or not r.Coroutine then error(\"Trying to await non-task object\")end;while not r.Finished do coroutine.yield()end;return r.LastReturn end;function DynamicDocument(r)local self={}self.template=r or\"\"local s=\"\"local aT={}self.tree={}local aU={br=true,hr=true,img=true,embed=true,param=true,area=true,col=true,input=true,meta=true,link=true,base=true,basefont=true,iframe=true,isindex=true,circle=true,polygon=true,polyline=true,ellipse=true,path=true,line=true,rect=true,use=true}function table.indexOf(val,table)for aV,aW in ipairs(table)do if aW==val then return aV end end;return nil end;function self.makeFunc(string)local val=\"nil\"if aT[string]==nil then local aO,aX=pcall(load(\"return function() return \"..string..\" end\",nil,\"t\",_ENV))if aO then aT[string]=aX;val=aX()if type(val)==\"function\"then aT[string]=aX()val=val()end end else val=aT[string]()end;return val end;local function A(r)local aY=0;local B={}local aZ={}aZ.dd={}table.insert(B,aZ)local node={}for k,c,a_,Q,b0,b1,val,g in string.gmatch(r,\"(<)(%/?!?)([%w:_-'\\\\\\\"%[]+)(.-)(%/?%-?)>([%s\\r\\n\\t]*)([^<]*)([%s\\r\\n\\t]*)\")do a_=string.lower(a_)if c==\"/\"then if aY==0 then return aZ end;aY=aY-1;table.remove(B)else local function t(b2)local i=\"dd-\"return b2:sub(1,#i)==i end;aY=aY+1;node={}node.name=a_;node.children={}node.attr={}if B[aY-1]then node.parent=B[aY-1][#B[aY-1]]else node.parent=nil end;if Q~=\"\"then for b3,aW in string.gmatch(Q,\"%s([^%s=]+)=\\\"([^\\\"]+)\\\"\")do node.attr[b3]=string.gsub(aW,'\"','[^\\\\]\\\\\"')if t(b3)then if not aZ.dd[b3]then aZ.dd[b3]={}end;table.insert(aZ.dd[b3],node)end end;for b3,aW in string.gmatch(Q,\"%s([^%s=]+)='([^']+)'\")do node.attr[b3]=string.gsub(aW,'\"','[^\\\\]\\\\\"')if t(b3)then if not aZ.dd[b3]then aZ.dd[b3]={}end;table.insert(aZ.dd[b3],node)end end end;if not B[aY]then B[aY]={}end;table.insert(B[aY],node)if aU[a_]then if val~=\"\"then table.insert(B[aY],{name=\"textNode\",value=val})end;node.children={}aY=aY-1 else if val~=\"\"then table.insert(node.children,{name=\"textNode\",value=val})end;table.insert(B,node.children)end end end;return aZ end;local function b4(b5,b6)local B={b5}local b7=\"\"local function b8(b9)local ba=0;for bb in pairs(b9)do ba=ba+1 end;return ba end;if not b6 and b8(b5.dd)>0 then if b5.dd[\"dd-repeat\"]then for bc=#b5.dd[\"dd-repeat\"],1,-1 do local node=b5.dd[\"dd-repeat\"][bc]var,array=string.match(node.attr[\"dd-repeat\"],\"(.*) in (.*)\")node.attr[\"dd-repeat\"]=nil;local bd=b4({node},true)local be=string.gmatch(bd,\"{{([^}}]+)}}\")local bf={}for bg in be do if string.match(bg,var)then table.insert(bf,bg)end end;local s=\"\"local bh=self.makeFunc(array)for bc=1,#bh do _ENV[var]=bh[bc]local bt=bd;local bu=A(bt:gsub(\"^%s*(.-)%s*$\",\"%1\"))s=s..b4(bu)end;node.children={}node.name=\"textNode\"node.value=s end end;if b5.dd[\"dd-if\"]then for bc=#b5.dd[\"dd-if\"],1,-1 do local node=b5.dd[\"dd-if\"][bc]local bv=self.makeFunc(node.attr[\"dd-if\"])if bv then node.attr[\"dd-if\"]=nil else local bw=table.indexOf(node,node.parent.children)if bw then table.remove(node.parent.children,bw)end;node=nil;table.remove(b5.dd[\"dd-if\"],bc)b5.dd[\"dd-if\"][bc]=nil end end end;if b5.dd[\"dd-init\"]then for bc=#b5.dd[\"dd-init\"],1,-1 do local node=b5.dd[\"dd-init\"][bc]pcall(load(node.attr[\"dd-init\"],nil,\"t\",_ENV))node.attr[\"dd-init\"]=nil end end end;while#B~=0 do node=B[#B][1]if not node then break end;if node.name==\"textNode\"then local val=node.value:gsub(\"^%s*(.-)%s*$\",\"%1\")if not b6 then val=self.transformClosures(val)end;b7=b7 ..val else b7=b7 ..\"\\n\"..string.rep(\" \",#B-1)b7=b7 ..\"<\"..node.name;if node.attr then for bx,aW in pairs(node.attr)do if not b6 then bx=self.transformClosures(bx)aW=self.transformClosures(aW)end;b7=b7 ..\" \"..bx..'=\"'..aW..'\"'end end;if aU[node.name]then b7=b7 ..\"/>\"else b7=b7 ..\">\"end end;if node.children and#node.children>0 then table.insert(B,node.children)else table.remove(B[#B],1)if node.children and#node.children==0 and not aU[node.name]and not node.name==\"textNode\"then b7=b7 ..\"</\"..node.name..\">\"end;while#B>0 and#B[#B]==0 do table.remove(B)if#B>0 then if#B[#B][1].children>1 then b7=b7 ..\"\\n\"..string.rep(\" \",#B-1)..\"</\"..B[#B][1].name..\">\"else b7=b7 ..\"</\"..B[#B][1].name..\">\"end;table.remove(B[#B],1)end end end end;return b7:match\"^%s*(.-)%s*$\"end;function self.transformClosures(by)local bz={}local bA=string.gmatch(by,\"{{([^}}]+)}}\")for bc in bA do table.insert(bz,bc)end;if#bz>0 then for bc=1,#bz do local bB=bz[bc]val=self.makeFunc(bB)by=string.gsub(by,self.literalize(\"{{\"..bB..\"}}\"),tostring(val))end end;return by end;function self.literalize(b2)return b2:gsub(\"[%(%)%.%%%+%-%*%?%[%]%^%$]\",function(bg)return\"%\"..bg end)end;function self.Read()return b4(A(self.template))end;return self end;DUTTY={}local r={}local s={}local function aT(aU,aV)return aU:sub(aV,aV)end;local function aW(aU)local aO={}local aX=false;local A=''local aY=false;for B=1,#aU do local aZ=aT(aU,B)if aY==false and aX and aZ==aX then table.insert(aO,A)aX=false;A=''elseif aY==false and#A==0 and(not aX and(aZ=='\"'or aZ==\"'\"))then aX=aZ elseif aY==false and aZ==' 'and aX==false then if#A>0 then table.insert(aO,A)A=''end elseif aY==false and aZ=='\\\\'then aY=true else if aY then aY=false end;A=A..aZ end end;if#A>0 then table.insert(aO,A)end;return aO end;function DUTTY.input(aU)for B,k in pairs(r)do if'function'==type(k)then k(aU)end end;local c=aW(aU)if#c>0 then local a_=''local Q={}for B,aU in pairs(c)do if B==1 then a_=aU:lower()else table.insert(Q,aU)end end;if s[a_]and'function'==type(s[a_])then s[a_](table.unpack(Q))end end end;function DUTTY.onInput(k)if not'function'==type(k)then error('Event handler must be of type function')end;table.insert(r,k)end;function DUTTY.onCommand(aO,k)if not'function'==type(k)then error('Event handler must be of type function')end;s[aO:lower()]=k end;displaySize=0.85;system.print(fuelFontSize)CSS_SHUD=[[\n#horizon { \n  left: 0;\n  top: 0;\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  background: radial-gradient(ellipse 27vw 11vw at 50% 51vw, rgba(1,5,8,0.6) 50%,rgba(1,5,8,0) 90%);\n  font-family: Verdana;\n  \n}\n\n#speedometer::before {\n  display: block;\n  position: absolute;\n  content: ' ';\n  top: 0.25vh;\n  bottom: -17vh;\n  left: 50%;\n  width: 31vw;\n  border: 10px solid #]]..primaryColor..[[;\n  border-bottom: 0;\n  border-right: 0;\n  border-left: 0;\n  border-radius: 100%;\n  transform: translateX(-50%);\n  background-color: transparent;\n  filter: blur(100vw);\n}\n\n#speedometerBar {\n  display: block;\n  position: fixed;\n  left: 50%;\n  top: 77.2vh;\n  width: 30vw;\n  height: 24.5vh;\n  transform: translate(-50%);\n  content: ' ';\n  border: 10px solid #]]..primaryColor..[[;\n  border-bottom: 0;\n  border-right: 0;\n  border-left: 0;\n  border-radius: 100%;\n  background-size: contain;\n  background-color: transparent;\n  filter: blur(0.1vw);\n}\n\n#speedometer {\n  font-family: 'Verdana';\n  font-weight: normal;\n  font-style: normal;\n  position: fixed;\n  left: 50%;\n  bottom: 13vh;\n  font-size: 2.5vw;\n  transform: translate(-50%);\n  background-color: transparent;\n  width: 30vw;\n  height: 10vh;\n  text-align: center;\n}\n\n#speedometer .display {\n  position: absolute;\n  top: calc(50% + 1vh);\n  left: calc(50% + 0.25em);\n  transform: translate(-50%, -50%);\n  font-weight: bold;\n  text-shadow: 0 0 0.75vw #]]..textShadow..[[;\n  padding: 0;\n  margin: 0;\n  font-size: 2.8vw;\n}\n\n#speedometer .display .minor, #speedometer .unit {\n  position: relative;\n  left: -0.5em;\n  vertical-align: super;\n  font-size: 40%;\n}\n\n#speedometer .unit {\n  vertical-align: 50%;\n  font-size: 23%;\n  left: -1.33em;\n}\n\n#speedometer .accel {\n  font-size: 1.2vw;\n  text-shadow: 0 0 0.15vw #000000;\n  position: absolute;\n  left: 12.5%;\n  bottom: 0;\n  opacity: 0.75;\n}\n\n#speedometer .accel .major::before {\n  content: 'Δ';\n  font-size: 40%;\n}\n\n#speedometer .accel .unit {\n  left: -0.66em;\n}\n\n#speedometer .alt {\n  position: absolute;\n  left: 50%;\n  bottom: -0.65vh;\n  transform: translateX(-50%);\n  font-size: 0.65vw;\n  text-align: center;\n}\n\n#speedometer .misc {\n  position: absolute;\n  left: 50%;\n  bottom: -1.5vh;\n  transform: translateX(-50%);\n  font-size: 0.4vw;\n  text-align: center;\n}\n\n#speedometer .throttle {\n  position: absolute;\n  left: 50%;\n  bottom: -4.3vh;\n  transform: translateX(-50%);\n  font-size: 0.7vw;\n  text-align: center;\n}\n\n#speedometer .vertical {\n  font-size: 1.3vw;\n  text-shadow: 0 0 0.15vw #000000;\n  position: absolute;\n  right: 12.5%;\n  bottom: 0;\n  opacity: 0.75;\n  text-align: right;\n}\n\n#speedometer .vertical::after {\n  content: '↕ m/s';\n  vertical-align: 50%;\n  font-size: 33%;\n}\n\n#speedometer::after {\n  display: block;\n  font-size: 0;\n  background-size: contain;\n  content: ' ';\n  position: absolute;\n  top: 0.5vh;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 666;\n  opacity: 0.5;\n}\n\n#horizon-menu {\n  text-transform: uppercase;\n  font-family: 'Verdana';\n  font-size: ]]..displaySize..[[vw;\n  display: flex;\n  flex-direction: column;\n  position: fixed;\n  bottom: 35%;\n  left: 2vw;\n  width: 18vw;\n  padding: 1vw;\n  transform: perspective(50vw) rotateY(35deg);\n  text-shadow: 0.1vw 0 0.25vw #000000;\n}\n#horizon-menu .item {\n  color: #fff;\n  padding: 0.2vw 0.5vw;\n  z-index: 99999;\n}\n#horizon-menu .item .right {\n  float: right;\n}\n#horizon-menu .item .red {\n  color: #]]..secondaryColor..[[;\n}\n#horizon-menu .item.active {\n  position: relative;\n  text-shadow: 0 0 0.75vw #]]..secondaryColor..[[;\n  transform: translateZ(0.33vw);\n  font-size: 1.15em;\n  transform-style: preserve-3d;\n}\n\n#horizon-menu .item.active::before {\n  display: block;\n  content: ' ';\n  position: absolute;\n  top: 15%;\n  bottom: 15%;\n  left: 0.1vw;\n  right: 0.1vw;\n  background: #]]..secondaryColor..[[aa;\n  z-index: -50;\n  filter: blur(1vw);\n  opacity: 0.2;\n}\n\n#horizon-menu .item.active::after {\n  display: block;\n  content: ' ';\n  position: absolute;\n  top: 20%;\n  bottom: 40%;\n  left: 0.1vw;\n  right: 0.1vw;\n  background: #]]..secondaryColor..[[aa;\n  z-index: -50;\n  filter: blur(0.2vw);\n  opacity: 0.3; \n}\n#horizon-menu .item.locked {\n  padding-left: 0.4vw;\n}\n#horizon-menu .item.locked::before {\n  display: block;\n  content: ' ';\n  position: absolute;\n  top: 15%;\n  bottom: 15%;\n  left: 0.1vw;\n  right: 0.1vw;\n  background: #]]..primaryColor..[[aa;\n  z-index: -50;\n  filter: blur(1vw);\n  opacity: 0.2;\n}\n#horizon-menu .item.locked::after {\n  display: block;\n  content: ' ';\n  position: absolute;\n  top: 20%;\n  bottom: 40%;\n  left: 0.1vw;\n  right: 0.1vw;\n  background: #]]..primaryColor..[[aa;\n  z-index: -50;\n  filter: blur(0.2vw);\n  opacity: 0.6; \n}\n\n#horizon-menu::after {\n  content: ' ';\n  filter: blur(1vw);\n  display: block;\n  border-top-left-radius: 1vw;\n  border-top-right-radius: 1vw;\n  border-image: linear-gradient(to bottom, #]]..primaryColor..[[ff, #]]..primaryColor..[[00) 1 100%;\n  background: linear-gradient(to bottom, rgba(0,0,0,0.65) 50%,rgba(0,0,0,0) 100%);\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: -99;\n}\n\n#horizon-menu::before {\n  content: ' ';\n  filter: blur(0.05vw);\n  display: block;\n  border-top-left-radius: 1vw;\n  border-top-right-radius: 1vw;\n  border-top: 0.25vw solid #]]..primaryColor..[[;\n  border-left: 0.25vw solid #]]..primaryColor..[[;\n  border-right: 0.25vw solid #]]..primaryColor..[[;\n  border-image: linear-gradient(to bottom, #]]..primaryColor..[[ff, #]]..primaryColor..[[00) 1 100%;\n  background: radial-gradient(ellipse at top, rgba(0,0,0,0.65) 0%,rgba(0,0,0,0) 100%);\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: -100;\n}\n\n/* ORE TRILATERATE STYLE */\n\np {\n  /*color:#eca943;*/\n   font-size:100%;\n  }\n\n.block {\n  border: 1px solid DimGray;\n  border-radius:10px;\n  background-color: rgba(0,0,0,.5)\n  }\n\n#main_block{\n  text-align: center;\n  padding: 10px 10px 10px 10px;\n  }\n\n#help_block{\n  text-align: left;\n  padding: 10px 10px 10px 10px;\n  width: 320px;\n  }\t\n\n#pause_block{        \ntext-align: center;\n  font-size:90%;\n  }\n\n#panel_left {  \n  position: absolute;\n  top: 0%;\nleft: 0%;\n  /*width: 310px;*/\n\n  }\n#slider_header {\n  position: absolute;\n  top: 0vh;\n  font-size:110%;\nwidth: 100%;\ntext-align: center;\t   \n  }\n\n\n#slider_main {\n  position: relative;\n  font-size:105%;\ncolor:#eca943;\n  /*left: -51%;/*0%*/*/\n  }\n\n#slider_footer{\n  position: relative;\n  font-size:120%;\n  top:80%;\n  left:10%; \n  }\n\n#panel_slider {\n  position: absolute;\n  top: 54.5vh; ;\n  left: 66.8vw;/*66.8vw;*/\n  width: 9vw;/*9vw;*/\n  height: 28.5vh;\n  transform: skew(15.85deg); /*15.85deg*/\n  border-bottom: 28.5vh solid rgba(0,0,0,.25);\n  border-right: 1vw solid transparent;\n  /*background-color:rgba(0,0,0,.75)*/  \t\n  }\n\n#panel_test {  \n  position: fixed;\n  top: 100px; /* or whatever top you need */\nleft: 50%;\nwidth: auto;\n-webkit-transform: translateX(-50%);\n-moz-transform: translateX(-50%);\n-ms-transform: translateX(-50%);\n-o-transform: translateX(-50%);\ntransform: translateX(-50%);\n}\n#fuelTanks {\n  position: absolute;\n  top: 2%;\n  left: 2%;\n  width: 12vw;\n  height: 15vh;\n  color: #1b1b1b;\n  font-family: Verdana;\n  font-size: 1vh;\n  text-align: center;\n}\n#fuelTanks .fuel-meter {\n  display: block;\n  position: relative;\n  z-index: 1;\n  border-radius: 0.5em;\n  background: #c6c6c6;\n  padding: 0.5em 1em;\n  margin-bottom: 0.5em;\n  overflow: hidden;\n  box-sizing: border-box;\n}\n#fuelTanks .fuel-meter .fuel-level {\n  display: block;\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  bottom: 0px;\n  z-index: -1;\n  border: 0px none;\n  margin: 0;\n  padding: 0;\n}\n#fuelTanks .fuel-meter.fuel-type-atmo .fuel-level { background: #1dd1f9; }\n#fuelTanks .fuel-meter.fuel-type-space .fuel-level { background: #fac31e; }\n#fuelTanks .fuel-meter.fuel-type-rocket .fuel-level { background: #bfa6ff; }\n.st0{fill:none;stroke:#]]..ARCrosshair..[[;stroke-width:1;stroke-miterlimit:10;}\n.st1{fill:none;stroke:#]]..ARCrosshair..[[;stroke-width:2;stroke-miterlimit:10;}\n.st2{fill:#]]..ARCrosshair..[[;stroke:#]]..ARCrosshair..[[;stroke-miterlimit:10;}\n.st3{fill:#]]..ARCrosshair..[[; font-family: Verdana; font-size:10.5px;}\n.shadow {\n  -webkit-filter: drop-shadow( 3px 3px 2px rgba(0, 0, 0, .7));\n  filter: drop-shadow( 3px 3px 2px rgba(0, 0, 0, .7));\n}\n]]system.print(\"ContainerOp\"..ContainerOptimization)fuelTanks={}FuelMass={}FuelTime={}fuelTypes={atmo={density=4.000},space={density=6.000},rocket={density=0.800}}local function bC(bD)if fuelTankHandlingAtmo>0 then return bD+bD*fuelTankHandlingAtmo*0.2 else return bD end end;local function bE(bD)if fuelTankHandlingSpace>0 then return bD+bD*fuelTankHandlingSpace*0.2 else return bD end end;local function bF(bG,type)local bH=bG*fuelTypes[type].density;local bI=bH;if ContainerOptimization>0 then bI=bH-bH*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bI=bI-bH*FuelTankOptimization*0.05 end;return bI end;function normalizeHp(type,bJ)local bK=0;if type==\"atmo\"then if bJ>=50 and bJ<163 then bK=50 elseif bJ>=163 and bJ<1315 then bK=163 elseif bJ>=1315 and bJ<10461 then bK=1315 elseif bJ>=10461 then bK=10461 end elseif type==\"space\"then if bJ>=50 and bJ<187 then bK=50 elseif bJ>=187 and bJ<1496 then bK=187 elseif bJ>=1496 and bJ<15933 then bK=1496 elseif bJ>=15933 then bK=15933 end elseif type==\"rocket\"then if bJ>=366 and bJ<736 then bK=366 elseif bJ>=736 and bJ<6231 then bK=736 elseif bJ>=6231 and bJ<68824 then bK=6231 elseif bJ>=68824 then bK=68824 end end;return bK end;function normalizeHpAtmo(bJ)end;function normalizeHpSpace(bJ)end;function normalizeHpRocket(bJ)end;fuelTankSpecsByMaxHP={atmo={_50={type=\"atmo\",size=\"XS\",capacity=function()return bC(100)end,baseWeight=35.030,maxWeight=function()return bF(bC(100),\"atmo\")end},_163={type=\"atmo\",size=\"S\",capacity=function()return bC(400)end,baseWeight=182.670,maxWeight=function()return bF(bC(400),\"atmo\")end},_1315={type=\"atmo\",size=\"M\",capacity=function()return bC(1600)end,baseWeight=988.670,maxWeight=function()return bF(bC(1600),\"atmo\")end},_10461={type=\"atmo\",size=\"L\",capacity=function()return bC(12800)end,baseWeight=5480.000,maxWeight=function()return bF(bC(12800),\"atmo\")end}},space={_50={type=\"space\",size=\"XS\",capacity=function()return bC(100)end,baseWeight=35.030,maxWeight=function()return bF(bC(100),\"space\")end},_187={type=\"space\",size=\"S\",capacity=function()return bE(400)end,baseWeight=182.670,maxWeight=function()return bF(bC(400),\"space\")end},_1496={type=\"space\",size=\"M\",capacity=function()return bE(1600)end,baseWeight=988.670,maxWeight=function()return bF(bC(1600),\"space\")end},_15933={type=\"space\",size=\"L\",capacity=function()return bE(12800)end,baseWeight=5480.000,maxWeight=function()return bF(bC(12800),\"space\")end}},rocket={_366={type=\"rocket\",size=\"XS\",capacity=function()return 400 end,baseWeight=173.420,maxWeight=function()return bF(bC(400),\"rocket\")end},_736={type=\"rocket\",size=\"S\",capacity=function()return 800 end,baseWeight=886.720,maxWeight=function()return bF(bC(800),\"rocket\")end},_6231={type=\"rocket\",size=\"M\",capacity=function()return 6400 end,baseWeight=4720.000,maxWeight=function()return bF(bC(6400),\"rocket\")end},_68824={type=\"rocket\",size=\"L\",capacity=function()return 50000 end,baseWeight=25740.000,maxWeight=function()return bF(bC(50000),\"rocket\")end}}}local function bL(C)return C==math.huge or C==-math.huge end;local function bM(C)return C~=C end;function disp_time(bN)if bL(bN)or bM(bN)then return\"inf\"end;local bO=math.floor(bN/86400)local bP=math.floor(math.fmod(bN,86400)/3600)local bQ=math.floor(math.fmod(bN,3600)/60)local bR=math.floor(math.fmod(bN,60))if bN>=86400 then return string.format(\"%dd:%02dh\",bO,bP)elseif bN<86400 and bN>3600 then return string.format(\"%02dh:%02dm:%02ds\",bP,bQ,bR)elseif bN<3600 and bN>60 then return string.format(\"%02dm:%02ds\",bQ,bR)else return string.format(\"%02ds\",bR)end end;local bS=table.unpack;function fuelUsed(bT)local t={}function sum(r,...)if r then return r-sum(...)else return 0 end end;function average(c)if#t==bT then table.remove(t,1)end;if c~=0 and c~=nil then t[#t+1]=c end;return sum(bS(t))end;return average end;function getFuelSituation()local bU={atmo={},space={},rocket={}}for a4,bV in pairs(fuelTanks)do table.insert(bU[bV.type],{name=core.getElementNameById(a4),level=getFuelTankLevel(a4),time=getFuelTime(a4),specs=bV})end;return bU end;function getFuelTankSpecs(bW,bX)local bY=math.floor(core.getElementMaxHitPointsById(bX))system.print(bW..\"........\"..bY)return fuelTankSpecsByMaxHP[bW]['_'..normalizeHp(bW,bY)]end;function getFuelTankLiters(bX)local bZ=fuelTanks[bX]local b_=core.getElementMassById(bX)local c0=b_-bZ.baseWeight;return c0 end;function getFuelTankLevel(bX)local bZ=fuelTanks[bX]local bI=bZ.maxWeight()return getFuelTankLiters(bX)/bI end;function getFuelTime(bX)local bZ=fuelTanks[bX]local c1=FuelTime[bX]or system.getArkTime()local c2=math.max(system.getArkTime()-c1,0.001)local b_=core.getElementMassById(bX)local c3=bZ.baseWeight;local fuelUsed=FuelMass[bX](b_)local c4=c2/fuelUsed*(b_-c3)local c5=disp_time(c4)FuelTime[bX]=system.getArkTime()return c5 end;function getFuelTanks()local c6=core.getElementIdList()for B,c7 in pairs(c6)do local c8=core.getElementDisplayNameById(c7)if c8==\"Atmospheric Fuel Tank\"then local c9=getFuelTankSpecs(\"atmo\",c7)fuelTanks[c7]=c9;FuelMass[c7]=fuelUsed(2)elseif c8==\"Space Fuel Tank\"then fuelTanks[c7]=getFuelTankSpecs(\"space\",c7)FuelMass[c7]=fuelUsed(2)elseif c8==\"Rocket Fuel Tank\"then fuelTanks[c7]=getFuelTankSpecs(\"rocket\",c7)FuelMass[c7]=fuelUsed(2)end end;for G,i in ipairs(fuelTankSpecsByMaxHP)do for B,t in ipairs(i)do for b4,b5 in pairs(t)do end end end end;getFuelTanks()function TagManager(r)self={}local s={}local aT=\"\"local function aU(aV,aW)if aV==''then return false end;local aO,aX=0,{}for A,aY in function()return string.find(aW,aV,aO,true)end do table.insert(aX,string.sub(aW,aO,A-1))aO=aY+1 end;table.insert(aX,string.sub(aW,aO))return aX end;function self.tagsToString()if#s==0 then aT=\"all\"else aT=table.concat(s,\",\")end end;function self.Remove(B)if type(B)~=\"string\"then error(\"[TagManager] Unable to remove a tag - Not a string\")end;for aZ,k in pairs(s)do if B==k then table.remove(s,aZ)end end;self.tagsToString()end;function self.Add(B)if type(B)~=\"string\"then error(\"[TagManager] Unable to add a tag - Not a string\")end;for aZ,k in pairs(s)do if B==k then return end end;table.insert(s,B)self.tagsToString()end;if r~=nil and type(r)==\"string\"then for aZ,k in pairs(aU(\",\",r))do self.Add(k)end else self.Add(\"all\")end;setmetatable(self,{__tostring=function(self)return aT end})return self end;function Keybind(r)local self={}self.Key=r;local s={}function self.Add(aT,aU)if type(aT)~=\"function\"then error(\"[Keybind] Unable to add callback - not a function\")end;table.insert(s,{Function=aT,Name=aU})end;function self.Remove(aT)if type(aT)~=\"function\"then error(\"[Keybind] Unable to remove callback - not a function\")end;local aV={}for aW,aO in pairs(s)do aV[aO.Function]=aW end;for aW,aO in pairs(aV)do if aW==aT then s[aO]=nil end end end;function self.GetNames()local aX={}for aW,aO in pairs(s)do if aO.Name then table.insert(aX,aO.Name)end end;return aX end;function self.Call()for aW,aO in pairs(s)do aO.Function(self.Key)end end;return self end;function KeybindController()local self={}local A={\"forward\",\"backward\",\"left\",\"right\",\"yawleft\",\"yawright\",\"up\",\"down\",\"gear\",\"light\",\"landing\",\"brake\",\"option1\",\"option2\",\"option3\",\"option4\",\"option5\",\"option6\",\"option7\",\"option8\",\"option9\",\"stopengines\",\"speedup\",\"speeddown\",\"antigravity\",\"booster\",\"lshift\",\"lalt\",\"lalt\",\"strafeleft\",\"straferight\"}self.keyUp={}self.keyDown={}self.keyLoop={}function self.Call(aY,type)if type==\"up\"then if self.keyUp[aY]then self.keyUp[aY].Call(aY)end elseif type==\"down\"then if self.keyDown[aY]then self.keyDown[aY].Call(aY)end else if self.keyLoop[aY]then self.keyDown[aY].Call(aY)end;system.print(aY)end end;function self.GetNamedKeybinds()local aX={}for aW,aO in pairs(self.keyUp)do local B=aO.GetNames()if#B>0 then for aZ=1,#B do table.insert(aX,{Key=aO.Key,Name=B[aZ]})end end end;for aW,aO in pairs(self.keyDown)do local B=aO.GetNames()if#B>0 then for aZ=1,#B do table.insert(aX,{Key=aO.Key,Name=B[aZ]})end end end;for aW,aO in pairs(self.keyLoop)do local B=aO.GetNames()if#B>0 then for aZ=1,#B do table.insert(aX,{Key=aO.Key,Name=B[aZ]})end end end;table.sort(aX,function(k,c)return k.Key<c.Key end)return aX end;self.Init=function()end;local function a_()for aZ=1,#A do self.keyUp[A[aZ]]=Keybind(A[aZ])self.keyDown[A[aZ]]=Keybind(A[aZ])self.keyLoop[A[aZ]]=Keybind(A[aZ])end end;a_()return self end;keybindPresets={}IOScheduler=function()local self={}self.defaultData=nil;self.currentTask=nil;self.taskQueue={}function self.queueData(ca)table.insert(self.taskQueue,ca)end;function self.send(bB)output=screen.getScriptOutput()screen.clearScriptOutput()if output~=\"ack\"then if output and output~=\"\"then handleOutput.Read(output)end;coroutine.yield()self.send(bB)else screen.setScriptInput(serialize(bB))end end;function self.runQueue()if#self.taskQueue==0 then if self.defaultData~=nil then self.currentTask=coroutine.create(function()self.send(self.defaultData)end)coroutine.resume(self.currentTask)end else self.currentTask=coroutine.create(function()for A=1,#self.taskQueue do local ca=self.taskQueue[A]if type(ca)==\"table\"then self.send(ca)end;table.remove(self.taskQueue,A)end end)coroutine.resume(self.currentTask)end end;function self.update()if not screen then system.print(\"No screen found\")return end;if self.currentTask then if coroutine.status(self.currentTask)~=\"dead\"then coroutine.resume(self.currentTask)else self.runQueue()end else self.runQueue()end end;return self end()HandleOutput=function()local self={}function self.Read(output)system.print(\"handleOutput.Read(): \"..output)if type(output)~=\"string\"or output==\"\"then return end;local g=deserialize(output)if g.dataType==\"config\"then config=g;local cb=tonumber(config.delta)if cb~=nil then config.targetAlt=ship.altitude+cb;stats.data.target=config.targetAlt else stats.data.target=config.targetAlt end;self.Execute()elseif g.updateReq then ioScheduler.queueData(config)else system.print(tostring(g))end end;function self.Execute()ship.baseAltitude=helios:closestBody(ship.customTarget):getAltitude(ship.customTarget)ship.altitudeHold=config.targetAlt;if config.estop then config.delta=nil;config.targetAlt=0;ship.altitudeHold=0;ship.verticalLock=false;ship.elevatorActive=false;ship.brake=true;ship.stateMessage=\"EMERGENCY STOP\"system.print(ship.stateMessage)ioScheduler.queueData(config)else ship.brake=false end;if ship.altitudeHold and ship.altitudeHold~=0 then ship.elevatorActive=true;system.print(\"Alt diff: \"..config.targetAlt-ship.baseAltitude)ship.targetDestination=moveWaypointZ(ship.customTarget,config.targetAlt-ship.baseAltitude)end;if config.setBaseReq then setBase()config.setBaseReq=false;ioScheduler.queueData(config)end;config.elevation=ship.altitude;manualControlSwitch()end;return self end()ioScheduler=IOScheduler;handleOutput=HandleOutput;local a2=require('atlas')planetaryReference=PlanetRef()galaxyReference=planetaryReference(a2)helios=galaxyReference[0]kinematics=Kinematics()local cc=json.decode;local cd=cc(unit.getWidgetData()).maxBrake;function STEC(core,ce,cf)local self={}self.core=core;self.construct=construct;self.control=ce;self.nearestPlanet=helios:closestBody(construct.getWorldPosition())self.world={up=vec3(construct.getWorldOrientationUp()),down=-vec3(construct.getWorldOrientationUp()),left=-vec3(construct.getWorldOrientationRight()),right=vec3(construct.getWorldOrientationRight()),forward=vec3(construct.getWorldOrientationForward()),back=-vec3(construct.getWorldOrientationForward()),velocity=vec3(construct.getWorldVelocity()),acceleration=vec3(construct.getWorldAcceleration()),position=vec3(construct.getWorldPosition()),gravity=vec3(core.getWorldGravity()),vertical=vec3(core.getWorldVertical()),atmosphericDensity=ce.getAtmosphereDensity(),nearPlanet=unit.getClosestPlanetInfluence()>0,atlasAltitude=self.nearestPlanet:getAltitude(construct.getWorldPosition())}self.target={prograde=function()return self.world.velocity:normalize()end,retrograde=function()return-self.world.velocity:normalize()end,radial=function()return self.world.gravity:normalize()end,antiradial=function()return-self.world.gravity:normalize()end,normal=function()return self.world.velocity:normalize():cross(self.world.gravity:normalize()):normalize()end,antinormal=function()return self.world.velocity:normalize():cross(-self.world.gravity:normalize()):normalize()end}self.rot=vec3(0,0,0)self.deviationRot=vec3(0,0,0)self.id=construct.getId()self.controlMode=unit.getControlMode()self.alternateCM=false;self.tags=TagManager(\"all,brake\")self.targetDestination=nil;self.targetdestination=nil;self.customTarget=vec3(0,0,0)self.baseAltitude=0;self.verticalLock=false;self.lockVector=vec3(0,0,0)self.lockPos=vec3(0,0,0)self.altHoldPreset1=0;self.altHoldPreset2=0;self.altHoldPreset3=0;self.altHoldPreset4=0;self.deviation=0;self.deviationVec=vec3(0,0,0)self.stateMessage=\"\"self.pocket=false;self.autoShutdown=false;self.dockingClamps=false;self.elevatorDestination=vec3(0,0,0)self.IDIntensity=5;self.deviationThreshold=0.05;self.playerId=player.getId()self.targetVectorVertical=nil;self.breadCrumbDist=1000;self.deviated=false;self.breadCrumbs={}self.hoverHeight=10;self.targetVectorAutoUnlock=true;self.altitude=0;self.mass=self.construct.getMass()self.thrust=vec3(0,0,0)self.direction=vec3(0,0,0)self.rotation=vec3(0,0,0)self.rotationSpeed=2;self.rotationSpeedzMin=0.01;self.rotationSpeedz=0.01;self.maxRotationSpeedz=3;self.rotationStep=0.03;self.brakingFactor=10;self.angularThrust=vec3(0,0,0)self.inertialDampening=false;self.inertialDampeningDesired=false;self.brake=false;self.counterGravity=true;self.followGravity=false;self.gravityFollowSpeed=6;self.speedLimiter=2000;self.variableSpeedLimit=2000;self.speedLimiterToggle=true;self.verticalSpeedLimitAtmo=750;self.verticalSpeedLimitSpace=2000;self.approachSpeed=200;self.throttle=1;self.fMax=0;self.vMax=0;self.hMax=0;self.elevatorActive=false;self.altitudeHold=0;self.atmosphereThreshold=0;self.cruiseSpeed=0;self.ignoreVerticalThrottle=false;self.localVelocity=vec3(construct.getVelocity())self.brakeDistance=0;self.accelTime=nil;self.rollDegrees=self.world.vertical:angle_between(self.world.left)/math.pi*180-90;self.viewY=0;self.viewX=0;if self.world.vertical:dot(self.world.up)>0 then self.rollDegrees=180-self.rollDegrees end;self.pitchRatio=self.world.vertical:angle_between(self.world.forward)/math.pi-0.5;self.verticalCruise=false;self.verticalCruiseSpeed=0;self.priorityTags1=\"brake,airfoil,torque,vertical,lateral,longitudinal\"self.priorityTags2=\"atmospheric_engine,space_engine\"self.priorityTags3=\"\"local c1=system.getArkTime()function self.updateWorld()self.world={up=vec3(construct.getWorldOrientationUp()),down=-vec3(construct.getWorldOrientationUp()),left=-vec3(construct.getWorldOrientationRight()),right=vec3(construct.getWorldOrientationRight()),forward=vec3(construct.getWorldOrientationForward()),back=-vec3(construct.getWorldOrientationForward()),velocity=vec3(construct.getWorldVelocity()),acceleration=vec3(construct.getWorldAcceleration()),position=vec3(construct.getWorldPosition()),gravity=vec3(core.getWorldGravity()),vertical=vec3(core.getWorldVertical()),atmosphericDensity=ce.getAtmosphereDensity(),nearPlanet=unit.getClosestPlanetInfluence()>0,atlasAltitude=self.nearestPlanet:getAltitude(construct.getWorldPosition())}self.nearestPlanet=helios:closestBody(construct.getWorldPosition())self.rollDegrees=self.world.vertical:angle_between(self.world.left)/math.pi*180-90;if self.world.vertical:dot(self.world.up)>0 then self.rollDegrees=180-self.rollDegrees end;self.pitchRatio=self.world.vertical:angle_between(self.world.forward)/math.pi-0.5;self.AngularVelocity=vec3(construct.getWorldAngularVelocity())self.AngularAcceleration=vec3(construct.getWorldAngularAcceleration())self.AngularAirFriction=vec3(construct.getMaxThrustAlongAxis())self.airFriction=vec3(construct.getWorldAirFrictionAcceleration())local cg=helios:closestBody(construct.getWorldPosition()).atmosphereRadius;local ch=helios:closestBody(construct.getWorldPosition()).radius;self.atmosphereThreshold=cg-ch;self.airFriction=vec3(construct.getWorldAirFrictionAcceleration())self.mass=self.construct.getMass()self.altitude=helios:closestBody(construct.getWorldPosition()):getAltitude(construct.getWorldPosition())self.localVelocity=vec3(construct.getVelocity())self.maxBrake=cc(unit.getWidgetData()).maxBrake;local ci=construct.getMaxThrustAlongAxis(\"all\",{vec3(0,1,0):unpack()})local cj=construct.getMaxThrustAlongAxis(\"all\",{vec3(0,0,1):unpack()})if self.world.atmosphericDensity>0.1 then self.fMax=math.max(ci[1],-ci[2])else self.fMax=math.max(ci[3],-ci[4])end;if self.world.atmosphericDensity>0.1 then self.vMax=math.max(cj[1],-cj[2])else self.vMax=math.min(cj[3],-cj[4])end;local ck=construct.getMaxThrustAlongAxis(\"all\",{vec3(1,0,0):unpack()})if self.world.atmosphericDensity>0.1 then self.hMax=math.max(ck[1],-ck[2])else self.hMax=math.max(ck[3],-ck[4])end;local cl=self.mass*core.getGravityIntensity()local cm=self.vMax;local cn=self.maxBrake;local co=1;if self.maxBrake~=nil and core.getGravityIntensity()>=1 then if self.world.velocity:dot(-self.world.gravity:normalize())<1 then co=-1 end;cl=cl*co;cm=self.vMax+cl;cn=self.maxBrake+cl end;self.brakeDistance,self.accelTime=kinematics.computeDistanceAndTime(self.world.velocity:len(),0,self.mass,cm,20,cn)end;function self.calculateAccelerationForce(cp,bN)return self.mass*cp/bN end;function clamp(c,cq,cr)return math.min(cr,math.max(c,cq))end;function round(o,bp)local cs=10^(bp or 0)return math.floor(o*cs+0.5)/cs end;function self.throttleUp()self.throttle=clamp(self.throttle+0.05,0,1)end;function self.throttleDown()self.throttle=clamp(self.throttle-0.05,0,1)end;function moveWaypointZ(ct,V)return ct-ship.nearestPlanet:getGravity(ct):normalize()*V end;function self.worldToLocal(ct)return vec3(library.systemResolution3({self.world.right:unpack()},{self.world.forward:unpack()},{self.world.up:unpack()},{ct:unpack()}))end;function self.localToRelative(cu,cv,cw,cx)local cy,cz,cA=cw:unpack()local forwardX,cB,cC=cx:unpack()local cD,cE,cF=cv:unpack()local cG,cH,cI=cu:unpack()local cJ=cG*cy+cH*forwardX+cI*cD;local cK=cG*cz+cH*cB+cI*cE;local cL=cG*cA+cH*cC+cI*cF;return vec3(cJ,cK,cL)end;function MsToKmh(cM)return cM*3.6 end;function KmhToMs(cN)return cN/3.6 end;function self.apply()local c2=math.max(system.getArkTime()-c1,0.001)self.updateWorld()local cO=self.thrust;local cP=self.angularThrust;local ci=construct.getMaxThrustAlongAxis(\"all\",{vec3(0,1,0):unpack()})if not self.elevatorActive then self.inertialDampening=self.inertialDampeningDesired end;if self.direction.x~=0 then local az=(1-self.world.up:dot(-self.world.gravity:normalize()))*self.mass*0.000095;local cQ=-self.world.vertical*az;if self.direction.x<0 and math.abs(round2(self.hMax,0))<500 then cO=cO+self.world.right*self.direction.x+cQ:normalize()*self.fMax*self.throttle elseif self.direction.x>0 and math.abs(round2(self.hMax,0))<500 then cO=cO+self.world.right*self.direction.x+cQ:normalize()*self.fMax*self.throttle else cO=cO+self.world.right*self.direction.x*self.fMax*self.throttle end end;if self.direction.y~=0 then local az=(1-self.world.up:dot(-self.world.gravity:normalize()))*self.mass*0.000095;local cQ=-self.world.vertical*az;if self.direction.y<0 and math.abs(round2(ci[2],0))==0 then cO=cO+self.world.forward*self.direction.y+cQ:normalize()*self.fMax*self.throttle else cO=cO+self.world.forward*self.direction.y*self.fMax*self.throttle end end;if self.direction.z~=0 then local r=self.world.up*self.direction.z*self.fMax;if not self.ignoreVerticalThrottle then r=r*self.throttle end;cO=cO+r end;if self.rotation.x~=0 then cP=cP+self.world.forward:cross(self.world.up)*self.rotation.x*self.rotationSpeed;if self.targetVectorAutoUnlock then self.targetVector=nil end end;if self.rotation.y~=0 then cP=cP+self.world.up:cross(self.world.right)*self.rotation.y*self.rotationSpeed end;if self.rotation.z~=0 then if self.rotationSpeedz<=self.maxRotationSpeedz then self.rotationSpeedz=self.rotationSpeedz+self.rotationStep end;cP=cP+self.world.forward:cross(self.world.right)*self.rotation.z*clamp(self.rotationSpeedz,0.01,self.maxRotationSpeedz)if self.targetVectorAutoUnlock then self.targetVector=nil end end;if self.followGravity and self.rotation.x==0 then local cR=self.localVelocity:len()*self.mass;local cS=nil;local cT=self.world.up:cross(-self.nearestPlanet:getGravity(construct.getWorldPosition()))local cS=1;if self.pocket then if self.direction.x<0 then cS=0.25;cT=cT+ship.world.right:cross(-self.nearestPlanet:getGravity(construct.getWorldPosition())*0.25)elseif self.direction.x>0 then cS=0.25;cT=cT-ship.world.right:cross(-self.nearestPlanet:getGravity(construct.getWorldPosition())*0.25)elseif self.direction.y<0 then cT=cT+ship.world.forward:cross(-self.nearestPlanet:getGravity(construct.getWorldPosition())*0.25)end end;cT=cT*cS;cP=cP+cT end;self.deviationVec=moveWaypointZ(self.customTarget,self.altitude-self.baseAltitude)-self.world.position;self.deviationRot=self.world.forward:cross(self.rot)self.deviation=self.deviationVec:len()if self.elevatorActive then if not self.inertialDampening then self.inertialDampening=true end;if not self.counterGravity then self.counterGravity=true end;self.targetVector=self.rot;if self.world.velocity:len()>2000/3.6 then deviation=0 end;local cU=self.altitudeHold-self.altitude;local cV=1000;local cW=0;local ak=self.world.position-self.targetDestination:len()local cX=helios:closestBody(self.targetDestination):getAltitude(self.targetDestination)-self.altitude;local cY=vec3(0,0,0)local cZ;local c_=1;if self.altitude<=self.atmosphereThreshold+self.brakeDistance or self.altitude<=self.brakeDistance then cZ=self.verticalSpeedLimitAtmo else cZ=self.verticalSpeedLimitSpace end;if self.brakeDistance+cV>=math.abs(cU)then cZ=self.approachSpeed end;local deviationThreshold=self.deviationThreshold;if self.deviated or self.world.velocity:len()<1 then deviationThreshold=0.05 end;if self.deviation>deviationThreshold+self.world.velocity:len()*10^-2 then cY=moveWaypointZ(self.customTarget,self.altitude-self.baseAltitude)self.deviated=true;cW=self.deviation*self.IDIntensity;self.stateMessage=\"Correcting Deviation\"else self.deviated=false;cY=self.targetDestination end;if math.abs(cU)>self.brakeDistance and math.abs(cU)>500 and not self.deviated then self.stateMessage=\"Traveling\"cW=round2(clamp(cU,-cZ,cZ),1)elseif not self.deviated then self.stateMessage=\"Final approach\"cW=self.approachSpeed;if self.brakeDistance*1.5>=math.abs(ak)then cW=5 end end;local d0;if cX>self.breadCrumbDist and not self.deviated then d0=moveWaypointZ(self.customTarget,self.altitude-self.baseAltitude+self.breadCrumbDist)cY=d0 elseif cX<-self.breadCrumbDist and not self.deviated then d0=moveWaypointZ(self.customTarget,self.altitude-self.baseAltitude-self.breadCrumbDist)cY=d0 end;self.elevatorDestination=self.world.position-cY:normalize()cO=cO-self.elevatorDestination*self.mass*utils.clamp(ak*3.6,0.3,math.abs(cW)/3.6*self.IDIntensity)if ak<0.01 and not manualControl then self.elevatorActive=false;self.targetVector=nil;self.stateMessage=\"Idle\"self.dockingClamps=true elseif ak<2 and self.world.velocity:len()==0 and not manualControl then self.elevatorActive=false;self.targetVector=nil;self.stateMessage=\"Idle\"self.dockingClamps=true else self.dockingClamps=false end else self.destination=vec3(0,0,0)end;if self.inertialDampening then local d1=self.localVelocity;local cb=vec3(0,0,0)local d2=self.direction or vec3(0,0,0)if d2.x==0 then cb.x=d1.x end;if d2.y==0 then cb.y=d1.y end;if d2.z==0 then cb.z=d1.z end;cb=self.localToRelative(cb,self.world.up,self.world.right,self.world.forward)cO=cO-cb*self.mass*self.IDIntensity end;if self.brake then local d3=self.world.velocity:len()cO=-self.world.velocity*self.mass*math.max(self.brakingFactor*math.max(1,d3*0.5),d3*d3)end;if self.targetVector~=nil then local d4=vec3(self.world.forward.x,self.world.forward.y,self.world.forward.z)if type(self.targetVector)==\"function\"then d4=self.targetVector()elseif type(self.targetVector)==\"table\"then d4=self.targetVector end;cP=cP+self.world.forward:cross(d4)*self.rotationSpeed/4-(self.AngularVelocity*2-self.AngularAirFriction*2)end;if self.targetVectorVertical~=nil then local d4=vec3(self.world.up.x,self.world.up.y,self.world.up.z)if type(self.targetVector)==\"function\"then d4=self.targetVector()elseif type(self.targetVector)==\"table\"then d4=self.targetVector end;if self.world.up-self.targetVectorVertical:len()<0 then cP=cP+-self.world.up:cross(d4)*self.rotationSpeed/4-(self.AngularVelocity*2-self.AngularAirFriction*2)else cP=cP+self.world.up:cross(d4)*self.rotationSpeed/4-(self.AngularVelocity*2-self.AngularAirFriction*2)end end;if self.counterGravity then cO=cO-self.world.gravity*self.mass end;if self.verticalLock then local d5=self.world.position+self.world.up-self.lockPos;local d6=self.lockVector*self.lockVector:dot(d5)local d7=d6-d5;local d8=d7*self.mass*0.3;cO=cO+d8*self.mass end;cP=cP-(self.AngularVelocity*2-self.AngularAirFriction*2)cO=cO/self.mass;if self.controlMode~=unit.getControlMode()then self.controlMode=unit.getControlMode()if unit.getControlMode()==0 then self.alternateCM=false end;if unit.getControlMode()==1 then self.alternateCM=true end end;self.control.setEngineCommand(\"atmospheric_engine,space_engine,airfoil,brake,torque,vertical,lateral,longitudinal\",{cO:unpack()},{cP:unpack()},false,false,self.priorityTags1,self.priorityTags2,self.priorityTags3)cP=vec3(0,0,0)cO=vec3(0,0,0)self.elevatorDestination=vec3(0,0,0)c1=system.getArkTime()end;return self end;ship=STEC(core,unit)json=require('dkjson')quat=require('cpml/quat')vec3=require('cpml/vec3')const=require('cpml/constants')vec2=require('cpml/vec2')utils=require('cpml/utils')mat4=require(\"cpml/mat4\")mouseDeltaSum=vec2(0,0)local function r(s)if s>0 then return 1 elseif s<0 then return-1 else return 0 end end;function scaleViewBoundsY(aT)local aU=0;local aV=1250/mouseSensitivity;local aW=-(system.getScreenHeight()/2)local aO=system.getScreenHeight()/2;return(aT-aU)/(aV-aU)*(aO-aW)+aW end;function scaleViewBoundsX(aX)local aU=1;local aV=-1;if r(forwardX.x)==-1 and r(forwardX.y)==-1 then aU=-1;aV=1 elseif r(forwardX.x)==1 and r(forwardX.y)==-1 then aU=-1;aV=1 end;local aW=-(system.getScreenHeight()/2)local aO=system.getScreenHeight()/2;return(aX-aU)/(aV-aU)*(aO-aW)+aW end;function scaleViewBound(aU,aV,aW,aO,A)return(A-aU)/(aV-aU)*(aO-aW)+aW end;function deltaSum(aY,B)local aZ=0;local k=0;if aY.y+B.y<=0 then k=0 elseif aY.y+B.y>=1250/mouseSensitivity then k=1250/mouseSensitivity else k=aY.y+B.y end;return vec2(aZ,k)end;function updateAR()local c=vec2(system.getMouseDeltaX(),system.getMouseDeltaY())mouseDeltaSum=deltaSum(mouseDeltaSum,c)playerQ=quat(unit.getMasterPlayerRelativeOrientation())forwardX=playerQ*vec3(core.getConstructOrientationForward())ship.viewY=scaleViewBoundsY(mouseDeltaSum.y)ship.viewX=scaleViewBoundsX(forwardX.x)end;vec2=require('cpml/vec2')mat4=require(\"cpml/mat4\")local json=require(\"dkjson\")local d9=string.format;if next(manualSwitches)~=nil then for G,da in ipairs(manualSwitches)do system.print(\"Deactivate!\")da.deactivate()end end;function SpeedConvert(C)if not C or C==0 then return{0,\"00\",\"km/h\"}end;if C>5000 then local db=tonumber(tostring(round2(C/55.55,2)):match(\"%.(%d+)\"))db=string.format(\"%02d\",db)return{round2(C/55.55),db,\"su/h\"}end;local db=tonumber(tostring(round2(C/3.6,2)):match(\"%.(%d+)\"))db=string.format(\"%02d\",db)return{round2(C*3.6),db,\"km/h\"}end;function CruiseControl(C)local dc=0;if ship.cruiseSpeed<500 then dc=C*10 elseif ship.cruiseSpeed>=500 and ship.cruiseSpeed<=1999 then dc=C*50 elseif ship.cruiseSpeed>=2000 and ship.cruiseSpeed<=9999 then dc=C*100 elseif ship.cruiseSpeed>=10000 then dc=C*1000 end;ship.cruiseSpeed=utils.clamp(ship.cruiseSpeed+dc,-29990,29990)end;function getControlMode()if ship.alternateCM then return\"Cruise\"else return\"Travel\"end end;altHoldAdjustment=0.1;altAdjustment=3;function altHoldAdjustmentSetting()return altHoldAdjustment*10^altAdjustment end;function setAltHoldAdjustment()end;function SHUDMenuItem(dd,de,df)local self={}self.Enabled=true;self.Active=false;self.Content=dd;self.Class=\"\"self.Action=de or function(system,unit,self)end;self.Update=df or function(system,unit,self)end;function self.Disable()self.Enabled=false;return self end;function self.Enable()self.True=false;return self end;function self.Lock()SHUD.ScrollLock=true;self.Active=true;self.Class=\"locked\"return self end;function self.Unlock()SHUD.ScrollLock=false;self.Active=false;self.Class=\"\"return self end;return self end;SHUD=function()local self={}self.Enabled=false;self.FreezeUpdate=false;self.IntroPassed=false;self.FOV=system.getCameraHorizontalFov()self.ScreenW=system.getScreenWidth()self.ScreenH=system.getScreenHeight()self.Resolution=vec2(self.ScreenW,self.ScreenH)self.SvgMinX=-round(self.ScreenW/4/2,0)self.SvgMinY=-round(self.ScreenH/4/2,0)self.SvgWidth=round(self.ScreenW/4,0)self.SvgHeight=round(self.ScreenH/4,0)function scaleViewBounds(dg)local dh=-0.5;local di=0.5;local dj=-90;local dk=90;return-((dg-dh)/(di-dh)*(dk-dj)+dj)end;shipPitch=scaleViewBounds(ship.pitchRatio)self.SHUDFuelHtml=\"\"self.Markers={}self.MarkerBuffer={}function self.worldToScreen(cu)local bx=mat4():perspective(self.FOV,self.ScreenW/self.ScreenH,0.1,100000)local dl=ship.world.position-vec3(unit.getMasterPlayerRelativePosition())local dm=mat4():look_at(dl,dl+ship.world.forward,ship.world.up)local cu=dm*bx*{cu.x,cu.y,cu.z,1}cu[1]=cu[1]/cu[4]*0.5+0.5;cu[2]=cu[2]/cu[4]*0.5+0.5;cu[1]=cu[1]*100;cu[2]=cu[2]*100;return vec3(cu[1],cu[2],cu[3])end;local dn=SHUDMenuItem;local dp=DynamicDocument;function self.UpdateMarkers()self.MarkerBuffer={}for A=1,#self.Markers do local k=self.Markers[A]local dq={}local Q=vec3(0,0,0)if type(k.Position)==\"function\"then dq.pos=k.Position()Q=k.Position()else dq.pos=k.Position;Q=k.Position end;dq.pos=self.worldToScreen(dq.pos)dq.class=k.Class;dq.content='&nbsp;'if k.Name then dq.content=[[<div class=\"name\">]]..k.Name..[[</div>]]end;if k.ShowDistance then dq.content=dq.content..[[<div class=\"distance\">]]..round2(ship.world.position-Q:len())..[[m</div>]]end;if dq.pos.z>0 then self.MarkerBuffer[#self.MarkerBuffer+1]=dq end end end;local function dr(b4)return b4:gsub(\"%%\",\"%%%%\")end;function self.MakeBooleanIndicator(ds)local dt=[[<span class=\"right\">\n            <i dd-if=\"varName == true\">✓&nbsp;</i>\n            <i dd-if=\"varName == false\">✘&nbsp;</i>\n        </span>]]return dt:gsub(\"varName\",dr(ds))end;function self.MakeSliderIndicator(ds,du)du=du or\"\"local dt=[[<span class=\"right\">{{varName}}{{suffix}}<i>&udarr;&nbsp;</i></span>]]return dt:gsub(\"varName\",dr(ds)):gsub(\"{{suffix}}\",dr(du))end;function self.GenerateMenuLink(dv,dw)return dn(dv..self.MenuIcon,function()self.SelectMenu(dw)end)end;self.MenuIcon=[[<span class=\"right\"><i>&gt;&nbsp;</i></span>]]self.BackButton=dn([[<i>&lt;&nbsp;</i>&nbsp;]]..\"Back\",function()SHUD.Menu=SHUD.MenuList.prev;SHUD.CurrentIndex=1 end)self.Menu={dn(dp([[<span>Throttle<span>]]..self.MakeSliderIndicator(\"round2(ship.throttle * 100)\",\"%\")),function(G,G,b3)if b3.Active then b3.Unlock()else b3.Lock()end end,function(system,G,b3)ship.throttle=utils.clamp(ship.throttle+system.getMouseWheel()*0.05,-1,1)end),self.GenerateMenuLink(\"Stability Assist\",\"stability\"),self.GenerateMenuLink(\"Altitude Hold\",\"altHold\"),self.GenerateMenuLink(\"Ship Stats\",\"shipStats\"),dn([[<i>&#9432;&nbsp;</i><span>&nbsp;Hotkeys</span>]]..self.MenuIcon,function()self.SelectMenu(\"hotkeys\")end)}self.MenuList={}self.MenuList.flightMode={}self.MenuList.shipStats={dn(dp([[<span>Core ID:</span><span class=\"right\">{{ship.id}}</span>]])).Disable(),dn(dp([[<span>Mass:</span><span class=\"right\">{{round2(ship.mass/1000,2)}} Ton</span>]])).Disable(),dn(dp([[<span>FMax:</span><span class=\"right\">{{round2(ship.fMax/1000,2)}} KN</span>]])).Disable(),dn(dp([[<span>Pos X:</span><span class=\"right\">{{round2(ship.world.position.x)}}</span>]])).Disable(),dn(dp([[<span>Pos Y:</span><span class=\"right\">{{round2(ship.world.position.y)}}</span>]])).Disable(),dn(dp([[<span>Pos Z:</span><span class=\"right\">{{round2(ship.world.position.z)}}</span>]])).Disable()}self.MenuList.stability={dn(dp(\"<span>Gravity Suppression<span>\"..self.MakeBooleanIndicator(\"ship.counterGravity\")),function()ship.counterGravity=not ship.counterGravity end),dn(dp(\"<span>Gravity Follow</span>\"..self.MakeBooleanIndicator(\"ship.followGravity\")),function()ship.followGravity=not ship.followGravity end),dn(dp(\"<span>Inertial Dampening<span>\"..self.MakeBooleanIndicator(\"ship.inertialDampening\")),function()ship.inertialDampeningDesired=not ship.inertialDampeningDesired end),dn(dp([[<span>Hover Height<span>]]..self.MakeSliderIndicator(\"ship.hoverHeight\",\"m\")),function(G,G,b3)if b3.Active then b3.Unlock()else b3.Lock()end end,function(system,G,b3)ship.hoverHeight=utils.clamp(ship.hoverHeight+system.getMouseWheel(),0,35)end)}function self.updateTargetDest()ship.targetDestination=moveWaypointZ(ship.customTarget,utils.clamp(ship.altitudeHold+system.getMouseWheel()*altHoldAdjustmentSetting(),0,2000000)-ship.baseAltitude)ship.altitudeHold=utils.clamp(ship.altitudeHold+system.getMouseWheel()*altHoldAdjustmentSetting(),0,2000000)end;self.MenuList.altHold={dn(dp(\"<span>Altitude Hold<span>\"..self.MakeBooleanIndicator(\"ship.elevatorActive\")),function()ship.elevatorActive=not ship.elevatorActive end),dn(dp([[<span>Multiplier<span>]]..self.MakeSliderIndicator(\"round2(altHoldAdjustmentSetting(),3)\",\"\")),function(G,G,b3)if b3.Active then b3.Unlock()else b3.Lock()end end,function(system,G,b3)altAdjustment=utils.clamp(altAdjustment+system.getMouseWheel(),-1,4)end),dn(dp([[<span>Alt Setpoint<span>]]..self.MakeSliderIndicator(\"round2(ship.altitudeHold,3)\",\"m\")),function(G,G,b3)if b3.Active then b3.Unlock()else b3.Lock()end end,function(system,G,b3)self.updateTargetDest()end),dn(dp([[<span>Preset 1:</span><span class=\"right\">]]..mToKm(ship.altHoldPreset1)..\"</span>\"),function()ship.altitudeHold=ship.altHoldPreset1;ship.elevatorActive=true end),dn(dp([[<span>Preset 2:</span><span class=\"right\">]]..mToKm(ship.altHoldPreset2)..\"</span>\"),function()ship.altitudeHold=ship.altHoldPreset2;ship.elevatorActive=true end),dn(dp([[<span>Preset 3:</span><span class=\"right\">]]..mToKm(ship.altHoldPreset3)..\"</span>\"),function()ship.altitudeHold=ship.altHoldPreset3;ship.elevatorActive=true end),dn(dp([[<span>Preset 4:</span><span class=\"right\">]]..mToKm(ship.altHoldPreset4)..\"</span>\"),function()ship.altitudeHold=ship.altHoldPreset4;ship.elevatorActive=true end),dn(dp([[<span>Altitude:</span><span class=\"right\">{{round2(ship.altitude,4)}}</span>]])).Disable()}self.MenuList.hotkeys={}local dx=\"<style>\"..CSS_SHUD..\"</style>\"self.fuel=nil;function getFuelRenderedHtml()local dy=\"\"local dz=\"\"local dA=\"\"self.fuel=getFuelSituation()local dB=\"\"local dC=function(type,c9)local dD=100*c9.level;local dE=c9.level*c9.specs.capacity()return'<div class=\"fuel-meter fuel-type-'..type..'\"><hr class=\"fuel-level\" style=\"width:'..dD..'%%;\" />'..c9.time..' ('..math.floor(dD)..'%%, '..math.floor(dE)..'L)</div>'end;for G,c9 in pairs(self.fuel.atmo)do dB=dB..dC(\"atmo\",c9)end;for G,c9 in pairs(self.fuel.space)do dB=dB..dC(\"space\",c9)end;for G,c9 in pairs(self.fuel.rocket)do dB=dB..dC(\"rocket\",c9)end;self.SHUDFuelHtml=dB end;opacity=1.0;local dF=dp(dx..[[\n    <div id=\"horizon\" style=\"opacity: {{opacity}};\">\n        <svg dd-if=\"enableARReticle\" class=\"shadow\" height=\"100%\" width=\"100%\" viewBox=\"{{SHUD.SvgMinX}} {{SHUD.SvgMinY}} {{SHUD.SvgWidth}} {{SHUD.SvgHeight}}\">\n            <g transform=\"translate({{ship.viewX}},{{ -ship.viewY }}) scale(0.7)\">\n                <line class=\"st0\" x1=\"-0.5\" y1=\"-91.5\" x2=\"-0.5\" y2=\"-11.5\"/>\n                <line class=\"st0\" x1=\"116\" y1=\"-0.5\" x2=\"19\" y2=\"-0.5\"/>\n                <line class=\"st0\" x1=\"-0.5\" y1=\"10.25\" x2=\"-0.5\" y2=\"90.25\"/>\n                <line class=\"st0\" x1=\"-20\" y1=\"-0.5\" x2=\"-117\" y2=\"-0.5\"/>\n                <line class=\"st1\" x1=\"-0.5\" y1=\"-4\" x2=\"-0.5\" y2=\"3\"/>\n                <line class=\"st1\" x1=\"3\" y1=\"-0.5\" x2=\"-4\" y2=\"-0.5\"/>\n                <path class=\"st0\" d=\"M-10,16.34c-5.12-3.4-8.5-9.23-8.5-15.84c0-6.56,3.32-12.34,8.38-15.76\"/>\n                <path class=\"st0\" d=\"M10-15.96c5.68,3.29,9.5,9.43,9.5,16.46c0,7.03-3.82,13.17-9.5,16.46\"/>\n                <g transform=\"rotate({{ shipPitch }} 0,0)\">\n                    <path class=\"st0\" d=\"M-53.99-10.22c3.98-17.83,19.5-38.76,42.99-43.7\"/>\n                    <path class=\"st0\" d=\"M-11,51.99C-32.68,47.76-49.76,30.68-53.99,9\"/>\n                    <path class=\"st0\" d=\"M52.99,9C48.69,31.01,31.15,48.28,9,52.17\"/>\n                    <path class=\"st0\" d=\"M9-54.14c21.87,3.98,39.92,21.42,44.09,43.78\"/>\n                    <line class=\"st0\" x1=\"-53.5\" y1=\"-10.5\" x2=\"-94.5\" y2=\"-10.5\"/>\n                    <line class=\"st0\" x1=\"-54\" y1=\"9.5\" x2=\"-95\" y2=\"9.5\"/>\n                    <polyline class=\"st2\" points=\"53,9.5 84.49,9.5 94,9.5 84.5,13.5 84.5,9.5 \"/>\n                    <polyline class=\"st2\" points=\"53,-10.5 84.49,-10.5 94,-10.5 84.5,-14.5 84.5,-10.5 \"/>\n                </g dd-if=\"ship.world.nearPlanet\">\n            </g>\n\n\n        </svg>\n        <div id=\"speedometerBar\">&nbsp;</div>\n           <div id=\"speedometer\">\n               <span class=\"display\">\n               \t<span class=\"major\">{{SpeedConvert(ship.world.velocity:len())[1]}}</span>\n               \t<span class=\"minor\">{{SpeedConvert(ship.world.velocity:len())[2]}}</span>\n               \t<span class=\"unit\">{{SpeedConvert(ship.world.velocity:len())[3]}}</span>\n               </span>\n               <span class=\"accel\">\n               \t<span class=\"major\">{{round2(ship.world.acceleration:len(), 1)}}</span>\n               \t<span class=\"unit\">m/s</span>\n               </span>\n               <span class=\"vertical\">\n               \t{{round2(ship.world.velocity:dot(-ship.world.gravity:normalize()), 1)}}\n               </span>\n               <span class=\"alt\">\n               \t{{round2(ship.altitude)}}m\n               </span>\n\n               <span class=\"misc\">ATM {{round2(ship.world.atmosphericDensity, 2)}} | G {{round2(ship.world.gravity:len(), 2)}}m/s</span>\n               <span dd-if=\"not ship.alternateCM\" class=\"throttle\">Throttle {{round2(ship.throttle * 100)}}%</span>\n\t\t     <span dd-if=\"ship.alternateCM\" class=\"throttle\">Cruise {{round2(ship.cruiseSpeed)}} km/h</span>\n            </div>\n\n            <div id=\"horizon-menu\">\n                {{_SHUDBUFFER}}\n            </div>\n\n            </div>\n            <div id=\"fuelTanks\">\n            {{ SHUD.SHUDFuelHtml }}\n\n            </div>\n\n    </div>\n\n    ]])local dG=[[<div class=\"item {{class}}\">{{content}}</div>]]function self.SelectMenu(dH)if not SHUD.MenuList[dH]then error(\"[SHUD] Undefined menu: \"..dH)end;SHUD.MenuList.prev=SHUD.Menu;SHUD.Menu=SHUD.MenuList[dH]SHUD.CurrentIndex=1;if SHUD.Menu[#SHUD.Menu]~=SHUD.BackButton then table.insert(SHUD.Menu,SHUD.BackButton)end end;function self.Select()if not self.Enabled then return end;if#self.Menu<1 then return end;self.Menu[self.CurrentIndex].Action(self.system,self.unit,self.Menu[self.CurrentIndex])end;function self.Render()local dI=\"\"if self.Enabled then for A=1,#self.Menu do local dJ=self.Menu[A]if dJ.Active then dJ.Update(self.system,self.unit,dJ)end;local dK=dG;local dL=\"\"local dd=dJ.Content;if dd.Read then dd=dd.Read()end;dd=dr(dd)if self.CurrentIndex==A then dL=\"active\"end;if not dJ.Enabled then dL=dL..\" disabled\"end;dK=dK:gsub(\"{{class}}\",dL..\" \"..dJ.Class)dK=dK:gsub(\"{{content}}\",dd)dI=dI..dK end;_ENV[\"_SHUDBUFFER\"]=dr(dI)else ship.frozen=player.isFrozen()_ENV[\"_SHUDBUFFER\"]=dp([[<div class=\"item helpText\">Press ]]..\"[\"..self.system.getActionKeyName(\"speedup\")..\"]\"..[[ to  toggle menu</div>\n\t\t\t\t<div class=\"item helpText\"><span>Character Movement:</span>]]..self.MakeBooleanIndicator(\"ship.frozen\")..[[</div>\n\t\t\t\t<div class=\"item helpText\"><span>Vertical Lock:</span>]]..self.MakeBooleanIndicator(\"ship.verticalLock\")..[[</div>\n\t\t\t\t<div class=\"item helpText\"><span>Inertial Dampening:</span>]]..self.MakeBooleanIndicator(\"ship.inertialDampening\")..[[</div>\n\t\t\t\t<div class=\"item helpText\"><span>Gravity Follow:</span>]]..self.MakeBooleanIndicator(\"ship.followGravity\")..[[</div>\n\t\t\t\t<div class=\"item helpText\"><span>Gravity Supression:</span>]]..self.MakeBooleanIndicator(\"ship.counterGravity\")..[[</div>\n            ]]).Read()end;if not self.FreezeUpdate then self.system.setScreen(dF.Read())end end;function self.Update()if useGEAS then unit.activateGroundEngineAltitudeStabilization(ship.hoverHeight)end;if player.isFrozen()or self.Enabled then opacity=1 else opacity=0.5 end;if not self.ScrollLock and self.Enabled then local dM=system.getMouseWheel()if dM~=0 then self.CurrentIndex=self.CurrentIndex-dM;if self.CurrentIndex>#self.Menu then self.CurrentIndex=1 elseif self.CurrentIndex<1 then self.CurrentIndex=#self.Menu end end elseif not self.Enabled then if player.isFrozen()and unit.isRemoteControlled()==1 then ship.throttle=utils.clamp(ship.throttle+system.getMouseWheel()*0.05,-1,1)end;self.UpdateMarkers()end end;function self.Init(system,unit,dN)self.system=system;self.unit=unit;self.CurrentIndex=1;self.ScrollLock=false;system.showScreen(1)unit.hideWidget()local F=dN.GetNamedKeybinds()self.MenuList.hotkeys={}for A=1,#F do local dO=F[A]table.insert(self.MenuList.hotkeys,dn([[<span>]]..dO.Name..[[</span><span class=\"right\">]]..self.system.getActionKeyName(dO.Key)..[[</span>]]).Disable())end;self.MenuList.flightMode={}for B,i in pairs(keybindPresets)do table.insert(self.MenuList.flightMode,dn(string.upper(B),function()self.Init(self.system,self.unit,i)keybindPreset=B;keybindPresets[keybindPreset].Init()end))end;dN.Init()end;return self end()ship.hoverHeight=GEAS_Alt;ship.autoShutdown=autoShutdown;ship.altitudeHold=round2(ship.altitude,0)ship.inertialDampeningDesired=inertialDampening;ship.followGravity=followGravity;ship.minRotationSpeed=minRotationSpeed;ship.maxRotationSpeedz=maxRotationSpeed;ship.rotationStep=rotationStep;ship.verticalSpeedLimitAtmo=verticalSpeedLimitAtmo;ship.verticalSpeedLimitSpace=verticalSpeedLimitSpace;ship.approachSpeed=approachSpeed;ship.altHoldPreset1=altHoldPreset1;ship.altHoldPreset2=altHoldPreset2;ship.altHoldPreset3=altHoldPreset3;ship.altHoldPreset4=altHoldPreset4;ship.deviationThreshold=deviationThreshold;ship.pocket=a;ship.breadCrumbDist=breadCrumbDist;if construct.setDockingMode(dockingMode)then system.print(\"Docking mode set successfully\")else system.print(\"Invalid docking mode\")end;local dP=false;if flightModeDb~=nil then if not flightModeDb.hasKey(\"verticalSpeedLimitAtmo\")or updateSettings then flightModeDb.setFloatValue(\"verticalSpeedLimitAtmo\",verticalSpeedLimitAtmo)ship.verticalSpeedLimitAtmo=verticalSpeedLimitAtmo else ship.verticalSpeedLimitAtmo=flightModeDb.getFloatValue(\"verticalSpeedLimitAtmo\")end;if not flightModeDb.hasKey(\"verticalSpeedLimitSpace\")or updateSettings then flightModeDb.setFloatValue(\"verticalSpeedLimitSpace\",verticalSpeedLimitSpace)ship.verticalSpeedLimitSpace=verticalSpeedLimitSpace else ship.verticalSpeedLimitSpace=flightModeDb.getFloatValue(\"verticalSpeedLimitSpace\")end;if not flightModeDb.hasKey(\"approachSpeed\")or updateSettings then flightModeDb.setFloatValue(\"approachSpeed\",approachSpeed)ship.approachSpeed=approachSpeed else ship.approachSpeed=flightModeDb.getFloatValue(\"approachSpeed\")end;if not flightModeDb.hasKey(\"altHoldPreset1\")or updateSettings then flightModeDb.setFloatValue(\"altHoldPreset1\",altHoldPreset1)ship.altHoldPreset1=altHoldPreset1 else ship.altHoldPreset1=flightModeDb.getFloatValue(\"altHoldPreset1\")end;if not flightModeDb.hasKey(\"altHoldPreset2\")or updateSettings then flightModeDb.setFloatValue(\"altHoldPreset2\",altHoldPreset2)ship.altHoldPreset2=altHoldPreset2 else ship.altHoldPreset2=flightModeDb.getFloatValue(\"altHoldPreset2\")end;if not flightModeDb.hasKey(\"altHoldPreset3\")or updateSettings then flightModeDb.setFloatValue(\"altHoldPreset3\",altHoldPreset3)ship.altHoldPreset3=altHoldPreset3 else ship.altHoldPreset3=flightModeDb.getFloatValue(\"altHoldPreset3\")end;if not flightModeDb.hasKey(\"altHoldPreset4\")or updateSettings then flightModeDb.setFloatValue(\"altHoldPreset4\",altHoldPreset4)ship.altHoldPreset4=altHoldPreset4 else ship.altHoldPreset4=flightModeDb.getFloatValue(\"altHoldPreset4\")end;function writeTargetToDb(dQ,dR)if flightModeDb~=nil then flightModeDb.setFloatValue(dR..\"X\",dQ.x)flightModeDb.setFloatValue(dR..\"Y\",dQ.y)flightModeDb.setFloatValue(dR..\"Z\",dQ.z)if settingsActive then settingsActive=false end;system.print(\"Wrote \"..dR..': '..tostring(dQ))end end;function readTargetFromDb(dR)if not(flightModeDb and flightModeDb.hasKey(dR..\"X\"))then return end;local i=vec3(0,0,0)i.x=flightModeDb.getFloatValue(dR..\"X\")i.y=flightModeDb.getFloatValue(dR..\"Y\")i.z=flightModeDb.getFloatValue(dR..\"Z\")system.print(\"Read \"..dR..': '..tostring(i))return i end end;function gearToggle()if unit.isAnyLandingGearExtended()==1 then unit.retractLandingGears()else unit.extendLandingGears()end end;function scaleViewBound(dh,di,dj,dk,dg)return(dg-dh)/(di-dh)*(dk-dj)+dj end;function switchFlightMode(dS)SHUD.Init(system,unit,keybindPresets[dS])keybindPreset=dS;if flightModeDb then flightModeDb.setStringValue(\"flightMode\",dS)end end;function switchControlMode()if ship.alternateCM==false then ship.alternateCM=true else ship.alternateCM=false end end;function swapForceFields()if manualSwitches~=nil then if player.isFrozen()then manualSwitches[1].activate()for G,da in ipairs(forceFields)do da.deactivate()end else manualSwitches[1].deactivate()for G,da in ipairs(forceFields)do da.activate()end end end end;ship.baseAltitude=helios:closestBody(ship.customTarget):getAltitude(ship.customTarget)system.print(\"Altitude: \"..ship.baseAltitude)if flightModeDb~=nil then if flightModeDb.hasKey(\"BaseLocX\")then ship.customTarget=readTargetFromDb(\"BaseLoc\")else ship.customTarget=ship.world.position;system.print(\"No RTB set\")config.setBaseActive=true end;if flightModeDb.hasKey(\"BaseRotX\")then ship.rot=readTargetFromDb(\"BaseRot\")else ship.rot=ship.world.forward;config.setBaseActive=true end end;config.rtb=helios:closestBody(ship.customTarget):getAltitude(ship.customTarget)function setBase(r)if r==nil then ship.customTarget=ship.world.position;ship.rot=ship.world.right:cross(ship.nearestPlanet:getGravity(construct.getWorldPosition()))writeTargetToDb(ship.customTarget,\"BaseLoc\")writeTargetToDb(ship.rot,\"BaseRot\")elseif string.find(r,\"::pos\")~=nil then ship.customTarget=ship.nearestPlanet:convertToWorldCoordinates(r)writeTargetToDb(ship.customTarget,\"BaseLoc\")writeTargetToDb(ship.rot,\"BaseRot\")end;system.print(\"Base Position: \"..tostring(ship.nearestPlanet:convertToMapPosition(ship.customTarget)))config.rtb=helios:closestBody(ship.customTarget):getAltitude(ship.customTarget)ioScheduler.queueData(config)end;local dT=DUTTY;dT.onCommand('setbase',function(r)setBase(r)end)keybindPresets[\"keyboard\"]=KeybindController()keybindPresets[\"keyboard\"].Init=function()keybindPreset=\"keyboard\"ship.ignoreVerticalThrottle=true;ship.throttle=1 end;keybindPresets[\"keyboard\"].keyDown.up.Add(function()ship.direction.z=1;if not ship.counterGravity then ship.counterGravity=true end end)keybindPresets[\"keyboard\"].keyUp.up.Add(function()ship.direction.z=0 end)keybindPresets[\"keyboard\"].keyDown.down.Add(function()ship.direction.z=-1 end)keybindPresets[\"keyboard\"].keyUp.down.Add(function()ship.direction.z=0 end)keybindPresets[\"keyboard\"].keyDown.yawleft.Add(function()ship.rotation.z=-1 end)keybindPresets[\"keyboard\"].keyUp.yawleft.Add(function()ship.rotation.z=0;ship.rotationSpeedz=ship.minRotationSpeed end)keybindPresets[\"keyboard\"].keyDown.yawright.Add(function()ship.rotation.z=1 end)keybindPresets[\"keyboard\"].keyUp.yawright.Add(function()ship.rotation.z=0;ship.rotationSpeedz=ship.minRotationSpeed end)keybindPresets[\"keyboard\"].keyDown.forward.Add(function()ship.direction.y=1 end)keybindPresets[\"keyboard\"].keyUp.forward.Add(function()ship.direction.y=0 end)keybindPresets[\"keyboard\"].keyDown.backward.Add(function()ship.direction.y=-1 end)keybindPresets[\"keyboard\"].keyUp.backward.Add(function()ship.direction.y=0 end)keybindPresets[\"keyboard\"].keyDown.backward.Add(function()ship.direction.y=-1 end)keybindPresets[\"keyboard\"].keyUp.backward.Add(function()ship.direction.y=0 end)keybindPresets[\"keyboard\"].keyDown.left.Add(function()ship.direction.x=-1 end)keybindPresets[\"keyboard\"].keyUp.left.Add(function()ship.direction.x=0 end)keybindPresets[\"keyboard\"].keyDown.right.Add(function()ship.direction.x=1 end)keybindPresets[\"keyboard\"].keyUp.right.Add(function()ship.direction.x=0 end)keybindPresets[\"keyboard\"].keyDown.lshift.Add(function()dP=true end,\"Shift Modifier\")keybindPresets[\"keyboard\"].keyUp.lshift.Add(function()dP=false end)keybindPresets[\"keyboard\"].keyDown.brake.Add(function()ship.brake=true end)keybindPresets[\"keyboard\"].keyUp.brake.Add(function()ship.brake=false end)keybindPresets[\"keyboard\"].keyUp.stopengines.Add(function()SHUD.Select()if not SHUD.Enabled then if ship.direction.y==1 then ship.direction.y=0 else ship.direction.y=1 end end end,\"Cruise\")keybindPresets[\"keyboard\"].keyUp.gear.Add(function()useGEAS=not useGEAS;updateGEAS()end)keybindPresets[\"keyboard\"].keyUp.speedup.Add(function()SHUD.Enabled=not SHUD.Enabled end)keybindPresets[\"keyboard\"].keyUp[\"option1\"].Add(function()ship.inertialDampeningDesired=not ship.inertialDampeningDesired end,\"Inertial Dampening\")keybindPresets[\"keyboard\"].keyUp[\"option2\"].Add(function()player.freeze(not player.isFrozen())swapForceFields()end,\"Freeze character\")keybindPresets[\"keyboard\"].keyUp[\"option3\"].Add(function()ship.followGravity=not ship.followGravity end,\"Gravity Follow\")keybindPresets[\"keyboard\"].keyUp[\"option4\"].Add(function()ship.counterGravity=not ship.counterGravity end,\"Counter Gravity\")keybindPresets[\"keyboard\"].keyUp[\"option5\"].Add(function()ship.verticalLock=true;ship.lockVector=vec3(construct.getWorldOrientationUp())ship.lockPos=vec3(construct.getWorldPosition())+vec3(construct.getWorldOrientationUp())if flightModeDb~=nil then flightModeDb.setFloatValue(\"lockVectorX\",ship.lockVector.x)flightModeDb.setFloatValue(\"lockVectorY\",ship.lockVector.y)flightModeDb.setFloatValue(\"lockVectorZ\",ship.lockVector.z)flightModeDb.setFloatValue(\"lockPosX\",ship.lockPos.x)flightModeDb.setFloatValue(\"lockPosY\",ship.lockPos.y)flightModeDb.setFloatValue(\"lockPosZ\",ship.lockPos.z)end end,\"Set Vertical Lock\")keybindPresets[\"keyboard\"].keyUp[\"option6\"].Add(function()ship.verticalLock=not ship.verticalLock end,\"Toggle Vertical Lock\")keybindPresets[\"keyboard\"].keyUp[\"option7\"].Add(function()ship.altitudeHold=ship.baseAltitude;ship.elevatorActive=true;ship.targetDestination=moveWaypointZ(ship.customTarget,0)end,\"RTB\")keybindPresets[\"keyboard\"].keyUp[\"option8\"].Add(function()construct.setDockingMode(0)core.undock()end,\"Undock\")keybindPresets[\"keyboard\"].keyUp[\"option9\"].Add(function()if dP then flightModeDb.clear()system.print(\"DB Cleared\")else ship.verticalLock=false;ship.intertialDampening=true;ship.elevatorActive=false;config.manualControl=not config.manualControl;manualControlSwitch()end end,\"Manual Mode Toggle\")keybindPresets[\"screenui\"]=KeybindController()keybindPresets[\"screenui\"].Init=function()keybindPreset=\"screenui\"ship.ignoreVerticalThrottle=true;ship.throttle=1;player.freeze(true)ship.frozen=false end;keybindPresets[\"screenui\"].keyDown.lshift.Add(function()dP=true end,\"Shift Modifier\")keybindPresets[\"screenui\"].keyUp.lshift.Add(function()dP=false end)keybindPresets[\"screenui\"].keyDown.brake.Add(function()ship.brake=true end)keybindPresets[\"screenui\"].keyUp.brake.Add(function()ship.brake=false end)keybindPresets[\"screenui\"].keyUp[\"option7\"].Add(function()ship.altitudeHold=ship.baseAltitude;ship.elevatorActive=true;ship.targetDestination=moveWaypointZ(ship.customTarget,0)end,\"RTB\")keybindPresets[\"screenui\"].keyUp[\"option8\"].Add(function()construct.setDockingMode(0)core.undock()end,\"Undock\")keybindPresets[\"screenui\"].keyUp[\"option9\"].Add(function()if dP then flightModeDb.clear()system.print(\"DB cleared\")else ship.verticalLock=false;ship.intertialDampening=true;ship.elevatorActive=false;config.manualControl=not config.manualControl;manualControlSwitch()end end,\"Manual Mode Toggle\")if flightModeDb then if not flightModeDb.hasKey(\"flightMode\")then flightModeDb.setStringValue(\"flightMode\",\"keyboard\")end;keybindPreset=flightModeDb.getStringValue(\"flightMode\")else system.print(\"No databank installed.\")keybindPreset=\"keyboard\"end;keybindPreset=\"keyboard\"SHUD.Init(system,unit,keybindPresets[keybindPreset])Task(function()coroutine.yield()SHUD.FreezeUpdate=true;local dU=system.getArkTime()+2;while system.getArkTime()<dU do coroutine.yield()end;SHUD.FreezeUpdate=false;SHUD.IntroPassed=true end)player.freeze(true)ship.frozen=false;function updateGEAS()if useGEAS then unit.activateGroundEngineAltitudeStabilization(ship.hoverHeight)else unit.deactivateGroundEngineAltitudeStabilization()end end;updateGEAS()controlStateChange=true;function normalizeTravelMode()if ship.controlMode==1 and controlStateChange then ship.cruiseSpeed=round(ship.world.velocity:len()*3.6,-1)ship.throttle=0;controlStateChange=false end;if ship.controlMode==0 then controlStateChange=true end end;function autoLandingGear()if ship.world.velocity:len()>=83.3333 then unit.retractLandingGears()else unit.extendLandingGears()end end;config.floors.floor1=ship.altHoldPreset1;config.floors.floor2=ship.altHoldPreset2;config.floors.floor3=ship.altHoldPreset3;config.floors.floor4=ship.altHoldPreset4;elevatorName=construct.getName()config.rtb=helios:closestBody(ship.customTarget):getAltitude(ship.customTarget)config.targetAlt=0;system.print(\"Preset 1: \"..config.floors.floor1)system.print(\"Preset 2: \"..config.floors.floor2)system.print(\"Preset 3: \"..config.floors.floor3)system.print(\"Preset 4: \"..config.floors.floor4)ioScheduler.defaultData=stats;ioScheduler.queueData(config)ioScheduler.queueData(fuelAtmo)ioScheduler.queueData(fuelSpace)ElevatorScreen=function()local self={}function self.updateStats()stats.data.elevation=ship.altitude;stats.data.target=config.targetAlt;stats.data.velocity=ship.world.velocity:len()stats.data.mass=ship.mass;stats.data.gravity=ship.world.gravity:len()stats.data.target_dist=math.abs(ship.altitude-(ship.altitudeHold or 0))stats.data.brake_dist=ship.brakeDistance;stats.data.deviation=ship.deviation;stats.data.deviationVec=ship.worldToLocal(ship.deviationVec)stats.data.deviationRot=ship.worldToLocal(ship.deviationRot)stats.data.state=ship.stateMessage;stats.data.delta=nil end;self.updateStats()function self.updateScreenFuel()fuelAtmo.tanks={}fuelSpace.tanks={}for G,c9 in pairs(SHUD.fuel.atmo)do table.insert(fuelAtmo.tanks,fuelTank(c9.time,math.ceil(100*c9.level)))end;for G,c9 in pairs(SHUD.fuel.space)do table.insert(fuelSpace.tanks,fuelTank(c9.time,math.ceil(100*c9.level)))end;ioScheduler.queueData(fuelAtmo)ioScheduler.queueData(fuelSpace)end;if screen then screen.clearScriptOutput()else system.print(\"No screen!\")end;return self end()_G.BuildUnit={}local dV=_G.BuildUnit;_G.BuildSystem={}local dW=_G.BuildSystem;_G.BuildScreen={}local dX=_G.BuildScreen;local dY=nil;function dV.onStart()Events.Flush.Add(ship.apply)Events.Update.Add(SHUD.Update)getFuelRenderedHtml()system.print(\"Screen: \"..tostring(screen))if screen~=nil then manualControlSwitch()system.print(\"Altitude: \"..helios:closestBody(construct.getWorldPosition()):getAltitude(construct.getWorldPosition()))ship.altitudeHold=helios:closestBody(construct.getWorldPosition()):getAltitude(construct.getWorldPosition())ship.baseAltitude=helios:closestBody(ship.customTarget):getAltitude(ship.customTarget)end;if screen==nil then ship.verticalLock=false;ship.intertialDampening=true;ship.elevatorActive=false;config.manualControl=not config.manualControl;manualControlSwitch()end;if screen~=nil then dY=ElevatorScreen end;system.print(\"ElevatorScreen: \"..tostring(dY))local dZ=\"\"local d_=core.getMass()if emitter~=nil then system.print(\"Emitter Range: \"..emitter.getRange())end;if activateFFonStart then if next(manualSwitches)~=nil then for G,da in ipairs(manualSwitches)do da.activate()end end end;shipName=construct.getName()system.print(player.getId())unit.setTimer(\"SHUDRender\",0.02)unit.setTimer(\"FuelStatus\",3)unit.setTimer(\"DockingTrigger\",1)if laser~=nil then laser.deactivate()end;system.print([[Horizon 1.0.1.13]])if showDockingWidget then parentingPanelId=system.createWidgetPanel(\"Docking\")parentingWidgetId=system.createWidget(parentingPanelId,\"parenting\")system.addDataToWidget(unit.getWidgetDataId(),parentingWidgetId)end;if setBaseOnStart then setBase()end end;function dV.onStop()if next(manualSwitches)~=nil then for G,da in ipairs(manualSwitches)do da.deactivate()end end;config.shutDown=true;if screen then screen.setScriptInput(serialize(config))end;system.showScreen(false)if laser~=nil then laser.deactivate()end;for G,da in ipairs(forceFields)do da.deactivate()end end;function manualControlSwitch()if not config.manualControl then SHUD.Init(system,unit,keybindPresets[\"screenui\"])system.showScreen(false)player.freeze(false)ship.frozen=true;ship.stateMessage=\"Idle\"else SHUD.Init(system,unit,keybindPresets[\"keyboard\"])system.showScreen(true)player.freeze(true)ship.frozen=false;ship.stateMessage=\"Manual Control\"end end;local e0=false;local e1=ship.dockingClamps;function dV.onTimer(e2)if e2==\"SHUDRender\"then if screen==nil then if SHUD then SHUD.Render()end elseif config.manualControl then if SHUD then SHUD.Render()end;if enableARReticle then updateAR()end else end end;if e2==\"FuelStatus\"then getFuelRenderedHtml()if dY then dY.updateScreenFuel()end end;if e2==\"DockingTrigger\"then if telemeter~=nil then telDistance=telemeter.raycast().distance end;if ship.dockingClamps then if laser~=nil then laser.activate()end;if telemeter~=nil and telDistance>0 and telDistance<1 then if ship.autoShutdown and not config.manualControl then system.print(ship.altitude)unit.exit()end end end end end;function dW.onActionStart(de)keybindPresets[keybindPreset].Call(de,\"down\")end;function dW.onActionStop(de)keybindPresets[keybindPreset].Call(de,\"up\")end;function dW.onInputText(de)if DUTTY then DUTTY.input(de)end end;function dW.onActionLoop(de)end;function dW.onUpdate()if dY then dY.updateStats()end;ioScheduler.update()if Events then Events.Update()end;if TaskManager then TaskManager.Update()end end;function dW.onFlush()if Events then Events.Flush()end end;function dX.onMouseDown(b4,b5,e3)end;function toggleVerticalLock()ship.lockVector=vec3(construct.getWorldOrientationUp())ship.lockPos=vec3(construct.getWorldPosition())+vec3(construct.getWorldOrientationUp())end;function createBreadcrumbTrail(e4)local e5=moveWaypointZ(ship.customTarget,ship.world.atlasAltitude-ship.baseAltitude)local e6=moveWaypointZ(ship.customTarget,e4)local ak=e5-e4:len()if ak<1000 then return end;for A=1,round2(ak/1000,0),1 do if ship.nearestPlanet:getAltitude(e5)<ship.nearestPlanet:getAltitude(e6)then table.insert(ship.breadCrumbs,moveWaypointZ(e5,1000*A))else table.insert(ship.breadCrumbs,moveWaypointZ(e5,-1000*A))end end end;function dX.onMouseUp(b4,b5,e3)end",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "0"
    },
    {
      "code": "_G.BuildUnit.onStart()",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "1"
    },
    {
      "code": "_G.BuildUnit.onStop()",
      "filter": {
        "args": [],
        "signature": "onStop",
        "slotKey": "-1"
      },
      "key": "2"
    },
    {
      "code": "_G.BuildSystem.onActionStart(action)",
      "filter": {
        "args": [
          {
            "variable": "*"
          }
        ],
        "signature": "onActionStart(action)",
        "slotKey": "-2"
      },
      "key": "3"
    },
    {
      "code": "_G.BuildSystem.onActionStop(action)",
      "filter": {
        "args": [
          {
            "variable": "*"
          }
        ],
        "signature": "onActionStop(action)",
        "slotKey": "-2"
      },
      "key": "4"
    },
    {
      "code": "_G.BuildSystem.onInputText(action)",
      "filter": {
        "args": [
          {
            "variable": "*"
          }
        ],
        "signature": "onInputText(action)",
        "slotKey": "-2"
      },
      "key": "5"
    },
    {
      "code": "_G.BuildSystem.onUpdate()",
      "filter": {
        "args": [],
        "signature": "onUpdate",
        "slotKey": "-2"
      },
      "key": "6"
    },
    {
      "code": "_G.BuildSystem.onFlush()",
      "filter": {
        "args": [],
        "signature": "onFlush",
        "slotKey": "-2"
      },
      "key": "7"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"SHUDRender\")",
      "filter": {
        "args": [
          {
            "variable": "SHUDRender"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "8"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"FuelStatus\")",
      "filter": {
        "args": [
          {
            "variable": "FuelStatus"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "9"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"DockingTrigger\")",
      "filter": {
        "args": [
          {
            "variable": "DockingTrigger"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "10"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "0"
      },
      "key": "11"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "0"
      },
      "key": "12"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "0"
      },
      "key": "13"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "1"
      },
      "key": "14"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "1"
      },
      "key": "15"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "1"
      },
      "key": "16"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "2"
      },
      "key": "17"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "2"
      },
      "key": "18"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "2"
      },
      "key": "19"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "3"
      },
      "key": "20"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "3"
      },
      "key": "21"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "3"
      },
      "key": "22"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "4"
      },
      "key": "23"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "4"
      },
      "key": "24"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "4"
      },
      "key": "25"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "5"
      },
      "key": "26"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "5"
      },
      "key": "27"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "5"
      },
      "key": "28"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "6"
      },
      "key": "29"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "6"
      },
      "key": "30"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "6"
      },
      "key": "31"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "7"
      },
      "key": "32"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "7"
      },
      "key": "33"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "7"
      },
      "key": "34"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "8"
      },
      "key": "35"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "8"
      },
      "key": "36"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "8"
      },
      "key": "37"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "9"
      },
      "key": "38"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "9"
      },
      "key": "39"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "9"
      },
      "key": "40"
    }
  ],
  "methods": [],
  "events": []
}